// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: corenlp.proto

package corenlp_client

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//
// An enumeration for the valid languages allowed in CoreNLP
//
type Language int32

const (
	Language_Unknown          Language = 0
	Language_Any              Language = 1
	Language_Arabic           Language = 2
	Language_Chinese          Language = 3
	Language_English          Language = 4
	Language_German           Language = 5
	Language_French           Language = 6
	Language_Hebrew           Language = 7
	Language_Spanish          Language = 8
	Language_UniversalEnglish Language = 9
	Language_UniversalChinese Language = 10
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0:  "Unknown",
		1:  "Any",
		2:  "Arabic",
		3:  "Chinese",
		4:  "English",
		5:  "German",
		6:  "French",
		7:  "Hebrew",
		8:  "Spanish",
		9:  "UniversalEnglish",
		10: "UniversalChinese",
	}
	Language_value = map[string]int32{
		"Unknown":          0,
		"Any":              1,
		"Arabic":           2,
		"Chinese":          3,
		"English":          4,
		"German":           5,
		"French":           6,
		"Hebrew":           7,
		"Spanish":          8,
		"UniversalEnglish": 9,
		"UniversalChinese": 10,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_corenlp_proto_enumTypes[0].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_corenlp_proto_enumTypes[0]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Language) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Language(num)
	return nil
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{0}
}

//
// An enumeration of valid sentiment values for the sentiment classifier.
//
type Sentiment int32

const (
	Sentiment_STRONG_NEGATIVE Sentiment = 0
	Sentiment_WEAK_NEGATIVE   Sentiment = 1
	Sentiment_NEUTRAL         Sentiment = 2
	Sentiment_WEAK_POSITIVE   Sentiment = 3
	Sentiment_STRONG_POSITIVE Sentiment = 4
)

// Enum value maps for Sentiment.
var (
	Sentiment_name = map[int32]string{
		0: "STRONG_NEGATIVE",
		1: "WEAK_NEGATIVE",
		2: "NEUTRAL",
		3: "WEAK_POSITIVE",
		4: "STRONG_POSITIVE",
	}
	Sentiment_value = map[string]int32{
		"STRONG_NEGATIVE": 0,
		"WEAK_NEGATIVE":   1,
		"NEUTRAL":         2,
		"WEAK_POSITIVE":   3,
		"STRONG_POSITIVE": 4,
	}
)

func (x Sentiment) Enum() *Sentiment {
	p := new(Sentiment)
	*p = x
	return p
}

func (x Sentiment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sentiment) Descriptor() protoreflect.EnumDescriptor {
	return file_corenlp_proto_enumTypes[1].Descriptor()
}

func (Sentiment) Type() protoreflect.EnumType {
	return &file_corenlp_proto_enumTypes[1]
}

func (x Sentiment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Sentiment) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Sentiment(num)
	return nil
}

// Deprecated: Use Sentiment.Descriptor instead.
func (Sentiment) EnumDescriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{1}
}

//
// The seven informative Natural Logic relations
//
type NaturalLogicRelation int32

const (
	NaturalLogicRelation_EQUIVALENCE        NaturalLogicRelation = 0
	NaturalLogicRelation_FORWARD_ENTAILMENT NaturalLogicRelation = 1
	NaturalLogicRelation_REVERSE_ENTAILMENT NaturalLogicRelation = 2
	NaturalLogicRelation_NEGATION           NaturalLogicRelation = 3
	NaturalLogicRelation_ALTERNATION        NaturalLogicRelation = 4
	NaturalLogicRelation_COVER              NaturalLogicRelation = 5
	NaturalLogicRelation_INDEPENDENCE       NaturalLogicRelation = 6
)

// Enum value maps for NaturalLogicRelation.
var (
	NaturalLogicRelation_name = map[int32]string{
		0: "EQUIVALENCE",
		1: "FORWARD_ENTAILMENT",
		2: "REVERSE_ENTAILMENT",
		3: "NEGATION",
		4: "ALTERNATION",
		5: "COVER",
		6: "INDEPENDENCE",
	}
	NaturalLogicRelation_value = map[string]int32{
		"EQUIVALENCE":        0,
		"FORWARD_ENTAILMENT": 1,
		"REVERSE_ENTAILMENT": 2,
		"NEGATION":           3,
		"ALTERNATION":        4,
		"COVER":              5,
		"INDEPENDENCE":       6,
	}
)

func (x NaturalLogicRelation) Enum() *NaturalLogicRelation {
	p := new(NaturalLogicRelation)
	*p = x
	return p
}

func (x NaturalLogicRelation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NaturalLogicRelation) Descriptor() protoreflect.EnumDescriptor {
	return file_corenlp_proto_enumTypes[2].Descriptor()
}

func (NaturalLogicRelation) Type() protoreflect.EnumType {
	return &file_corenlp_proto_enumTypes[2]
}

func (x NaturalLogicRelation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NaturalLogicRelation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NaturalLogicRelation(num)
	return nil
}

// Deprecated: Use NaturalLogicRelation.Descriptor instead.
func (NaturalLogicRelation) EnumDescriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{2}
}

//
// A document; that is, the equivalent of an Annotation.
//
type Document struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Text       *string       `protobuf:"bytes,1,req,name=text" json:"text,omitempty"`
	Sentence   []*Sentence   `protobuf:"bytes,2,rep,name=sentence" json:"sentence,omitempty"`
	CorefChain []*CorefChain `protobuf:"bytes,3,rep,name=corefChain" json:"corefChain,omitempty"`
	DocID      *string       `protobuf:"bytes,4,opt,name=docID" json:"docID,omitempty"`
	DocDate    *string       `protobuf:"bytes,7,opt,name=docDate" json:"docDate,omitempty"`
	Calendar   *uint64       `protobuf:"varint,8,opt,name=calendar" json:"calendar,omitempty"`
	//*
	// A peculiar field, for the corner case when a Document is
	// serialized without any sentences. Otherwise
	SentencelessToken []*Token `protobuf:"bytes,5,rep,name=sentencelessToken" json:"sentencelessToken,omitempty"`
	Character         []*Token `protobuf:"bytes,10,rep,name=character" json:"character,omitempty"`
	Quote             []*Quote `protobuf:"bytes,6,rep,name=quote" json:"quote,omitempty"`
	//*
	// This field is for entity mentions across the document.
	Mentions                    []*NERMention `protobuf:"bytes,9,rep,name=mentions" json:"mentions,omitempty"`
	HasEntityMentionsAnnotation *bool         `protobuf:"varint,13,opt,name=hasEntityMentionsAnnotation" json:"hasEntityMentionsAnnotation,omitempty"` // used to differentiate between null and empty list
	//*
	// xml information
	XmlDoc   *bool      `protobuf:"varint,11,opt,name=xmlDoc" json:"xmlDoc,omitempty"`
	Sections []*Section `protobuf:"bytes,12,rep,name=sections" json:"sections,omitempty"`
	//* coref mentions for entire document *
	MentionsForCoref                    []*Mention `protobuf:"bytes,14,rep,name=mentionsForCoref" json:"mentionsForCoref,omitempty"`
	HasCorefMentionAnnotation           *bool      `protobuf:"varint,15,opt,name=hasCorefMentionAnnotation" json:"hasCorefMentionAnnotation,omitempty"`
	HasCorefAnnotation                  *bool      `protobuf:"varint,16,opt,name=hasCorefAnnotation" json:"hasCorefAnnotation,omitempty"`
	CorefMentionToEntityMentionMappings []int32    `protobuf:"varint,17,rep,name=corefMentionToEntityMentionMappings" json:"corefMentionToEntityMentionMappings,omitempty"`
	EntityMentionToCorefMentionMappings []int32    `protobuf:"varint,18,rep,name=entityMentionToCorefMentionMappings" json:"entityMentionToCorefMentionMappings,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{0}
}

var extRange_Document = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 255},
}

// Deprecated: Use Document.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*Document) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_Document
}

func (x *Document) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Document) GetSentence() []*Sentence {
	if x != nil {
		return x.Sentence
	}
	return nil
}

func (x *Document) GetCorefChain() []*CorefChain {
	if x != nil {
		return x.CorefChain
	}
	return nil
}

func (x *Document) GetDocID() string {
	if x != nil && x.DocID != nil {
		return *x.DocID
	}
	return ""
}

func (x *Document) GetDocDate() string {
	if x != nil && x.DocDate != nil {
		return *x.DocDate
	}
	return ""
}

func (x *Document) GetCalendar() uint64 {
	if x != nil && x.Calendar != nil {
		return *x.Calendar
	}
	return 0
}

func (x *Document) GetSentencelessToken() []*Token {
	if x != nil {
		return x.SentencelessToken
	}
	return nil
}

func (x *Document) GetCharacter() []*Token {
	if x != nil {
		return x.Character
	}
	return nil
}

func (x *Document) GetQuote() []*Quote {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *Document) GetMentions() []*NERMention {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *Document) GetHasEntityMentionsAnnotation() bool {
	if x != nil && x.HasEntityMentionsAnnotation != nil {
		return *x.HasEntityMentionsAnnotation
	}
	return false
}

func (x *Document) GetXmlDoc() bool {
	if x != nil && x.XmlDoc != nil {
		return *x.XmlDoc
	}
	return false
}

func (x *Document) GetSections() []*Section {
	if x != nil {
		return x.Sections
	}
	return nil
}

func (x *Document) GetMentionsForCoref() []*Mention {
	if x != nil {
		return x.MentionsForCoref
	}
	return nil
}

func (x *Document) GetHasCorefMentionAnnotation() bool {
	if x != nil && x.HasCorefMentionAnnotation != nil {
		return *x.HasCorefMentionAnnotation
	}
	return false
}

func (x *Document) GetHasCorefAnnotation() bool {
	if x != nil && x.HasCorefAnnotation != nil {
		return *x.HasCorefAnnotation
	}
	return false
}

func (x *Document) GetCorefMentionToEntityMentionMappings() []int32 {
	if x != nil {
		return x.CorefMentionToEntityMentionMappings
	}
	return nil
}

func (x *Document) GetEntityMentionToCorefMentionMappings() []int32 {
	if x != nil {
		return x.EntityMentionToCorefMentionMappings
	}
	return nil
}

//
// The serialized version of a CoreMap representing a sentence.
//
type Sentence struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Token                            []*Token            `protobuf:"bytes,1,rep,name=token" json:"token,omitempty"`
	TokenOffsetBegin                 *uint32             `protobuf:"varint,2,req,name=tokenOffsetBegin" json:"tokenOffsetBegin,omitempty"`
	TokenOffsetEnd                   *uint32             `protobuf:"varint,3,req,name=tokenOffsetEnd" json:"tokenOffsetEnd,omitempty"`
	SentenceIndex                    *uint32             `protobuf:"varint,4,opt,name=sentenceIndex" json:"sentenceIndex,omitempty"`
	CharacterOffsetBegin             *uint32             `protobuf:"varint,5,opt,name=characterOffsetBegin" json:"characterOffsetBegin,omitempty"`
	CharacterOffsetEnd               *uint32             `protobuf:"varint,6,opt,name=characterOffsetEnd" json:"characterOffsetEnd,omitempty"`
	ParseTree                        *ParseTree          `protobuf:"bytes,7,opt,name=parseTree" json:"parseTree,omitempty"`
	BinarizedParseTree               *ParseTree          `protobuf:"bytes,31,opt,name=binarizedParseTree" json:"binarizedParseTree,omitempty"`
	AnnotatedParseTree               *ParseTree          `protobuf:"bytes,32,opt,name=annotatedParseTree" json:"annotatedParseTree,omitempty"`
	Sentiment                        *string             `protobuf:"bytes,33,opt,name=sentiment" json:"sentiment,omitempty"`
	KBestParseTrees                  []*ParseTree        `protobuf:"bytes,34,rep,name=kBestParseTrees" json:"kBestParseTrees,omitempty"`
	BasicDependencies                *DependencyGraph    `protobuf:"bytes,8,opt,name=basicDependencies" json:"basicDependencies,omitempty"`
	CollapsedDependencies            *DependencyGraph    `protobuf:"bytes,9,opt,name=collapsedDependencies" json:"collapsedDependencies,omitempty"`
	CollapsedCCProcessedDependencies *DependencyGraph    `protobuf:"bytes,10,opt,name=collapsedCCProcessedDependencies" json:"collapsedCCProcessedDependencies,omitempty"`
	AlternativeDependencies          *DependencyGraph    `protobuf:"bytes,13,opt,name=alternativeDependencies" json:"alternativeDependencies,omitempty"`
	OpenieTriple                     []*RelationTriple   `protobuf:"bytes,14,rep,name=openieTriple" json:"openieTriple,omitempty"`         // The OpenIE triples in the sentence
	KbpTriple                        []*RelationTriple   `protobuf:"bytes,16,rep,name=kbpTriple" json:"kbpTriple,omitempty"`               // The KBP triples in this sentence
	EntailedSentence                 []*SentenceFragment `protobuf:"bytes,15,rep,name=entailedSentence" json:"entailedSentence,omitempty"` // The entailed sentences, by natural logic
	EntailedClause                   []*SentenceFragment `protobuf:"bytes,35,rep,name=entailedClause" json:"entailedClause,omitempty"`     // The entailed clauses, by natural logic
	EnhancedDependencies             *DependencyGraph    `protobuf:"bytes,17,opt,name=enhancedDependencies" json:"enhancedDependencies,omitempty"`
	EnhancedPlusPlusDependencies     *DependencyGraph    `protobuf:"bytes,18,opt,name=enhancedPlusPlusDependencies" json:"enhancedPlusPlusDependencies,omitempty"`
	Character                        []*Token            `protobuf:"bytes,19,rep,name=character" json:"character,omitempty"`
	Paragraph                        *uint32             `protobuf:"varint,11,opt,name=paragraph" json:"paragraph,omitempty"`
	Text                             *string             `protobuf:"bytes,12,opt,name=text" json:"text,omitempty"` // Only needed if we're only saving the sentence.
	LineNumber                       *uint32             `protobuf:"varint,20,opt,name=lineNumber" json:"lineNumber,omitempty"`
	// Fields set by other annotators in CoreNLP
	HasRelationAnnotations       *bool         `protobuf:"varint,51,opt,name=hasRelationAnnotations" json:"hasRelationAnnotations,omitempty"`
	Entity                       []*Entity     `protobuf:"bytes,52,rep,name=entity" json:"entity,omitempty"`
	Relation                     []*Relation   `protobuf:"bytes,53,rep,name=relation" json:"relation,omitempty"`
	HasNumerizedTokensAnnotation *bool         `protobuf:"varint,54,opt,name=hasNumerizedTokensAnnotation" json:"hasNumerizedTokensAnnotation,omitempty"`
	Mentions                     []*NERMention `protobuf:"bytes,55,rep,name=mentions" json:"mentions,omitempty"`
	MentionsForCoref             []*Mention    `protobuf:"bytes,56,rep,name=mentionsForCoref" json:"mentionsForCoref,omitempty"`
	HasCorefMentionsAnnotation   *bool         `protobuf:"varint,57,opt,name=hasCorefMentionsAnnotation" json:"hasCorefMentionsAnnotation,omitempty"`
	SentenceID                   *string       `protobuf:"bytes,58,opt,name=sentenceID" json:"sentenceID,omitempty"`                                    // Useful when storing sentences (e.g. ForEach)
	SectionDate                  *string       `protobuf:"bytes,59,opt,name=sectionDate" json:"sectionDate,omitempty"`                                  // date of section
	SectionIndex                 *uint32       `protobuf:"varint,60,opt,name=sectionIndex" json:"sectionIndex,omitempty"`                               // section index for this sentence's section
	SectionName                  *string       `protobuf:"bytes,61,opt,name=sectionName" json:"sectionName,omitempty"`                                  // name of section
	SectionAuthor                *string       `protobuf:"bytes,62,opt,name=sectionAuthor" json:"sectionAuthor,omitempty"`                              // author of section
	DocID                        *string       `protobuf:"bytes,63,opt,name=docID" json:"docID,omitempty"`                                              // doc id
	SectionQuoted                *bool         `protobuf:"varint,64,opt,name=sectionQuoted" json:"sectionQuoted,omitempty"`                             // is this sentence in an xml quote in a post
	HasEntityMentionsAnnotation  *bool         `protobuf:"varint,65,opt,name=hasEntityMentionsAnnotation" json:"hasEntityMentionsAnnotation,omitempty"` // check if there are entity mentions
	HasKBPTriplesAnnotation      *bool         `protobuf:"varint,68,opt,name=hasKBPTriplesAnnotation" json:"hasKBPTriplesAnnotation,omitempty"`         // check if there are KBP triples
	HasOpenieTriplesAnnotation   *bool         `protobuf:"varint,69,opt,name=hasOpenieTriplesAnnotation" json:"hasOpenieTriplesAnnotation,omitempty"`   // check if there are OpenIE triples
	// quote stuff
	ChapterIndex   *uint32 `protobuf:"varint,66,opt,name=chapterIndex" json:"chapterIndex,omitempty"`
	ParagraphIndex *uint32 `protobuf:"varint,67,opt,name=paragraphIndex" json:"paragraphIndex,omitempty"`
	// the quote annotator can soometimes add merged sentences
	EnhancedSentence *Sentence `protobuf:"bytes,70,opt,name=enhancedSentence" json:"enhancedSentence,omitempty"`
	// speaker stuff
	Speaker     *string `protobuf:"bytes,71,opt,name=speaker" json:"speaker,omitempty"`         // The speaker speaking this sentence
	SpeakerType *string `protobuf:"bytes,72,opt,name=speakerType" json:"speakerType,omitempty"` // The type of speaker speaking this sentence
}

func (x *Sentence) Reset() {
	*x = Sentence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sentence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentence) ProtoMessage() {}

func (x *Sentence) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentence.ProtoReflect.Descriptor instead.
func (*Sentence) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{1}
}

var extRange_Sentence = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 255},
}

// Deprecated: Use Sentence.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*Sentence) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_Sentence
}

func (x *Sentence) GetToken() []*Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *Sentence) GetTokenOffsetBegin() uint32 {
	if x != nil && x.TokenOffsetBegin != nil {
		return *x.TokenOffsetBegin
	}
	return 0
}

func (x *Sentence) GetTokenOffsetEnd() uint32 {
	if x != nil && x.TokenOffsetEnd != nil {
		return *x.TokenOffsetEnd
	}
	return 0
}

func (x *Sentence) GetSentenceIndex() uint32 {
	if x != nil && x.SentenceIndex != nil {
		return *x.SentenceIndex
	}
	return 0
}

func (x *Sentence) GetCharacterOffsetBegin() uint32 {
	if x != nil && x.CharacterOffsetBegin != nil {
		return *x.CharacterOffsetBegin
	}
	return 0
}

func (x *Sentence) GetCharacterOffsetEnd() uint32 {
	if x != nil && x.CharacterOffsetEnd != nil {
		return *x.CharacterOffsetEnd
	}
	return 0
}

func (x *Sentence) GetParseTree() *ParseTree {
	if x != nil {
		return x.ParseTree
	}
	return nil
}

func (x *Sentence) GetBinarizedParseTree() *ParseTree {
	if x != nil {
		return x.BinarizedParseTree
	}
	return nil
}

func (x *Sentence) GetAnnotatedParseTree() *ParseTree {
	if x != nil {
		return x.AnnotatedParseTree
	}
	return nil
}

func (x *Sentence) GetSentiment() string {
	if x != nil && x.Sentiment != nil {
		return *x.Sentiment
	}
	return ""
}

func (x *Sentence) GetKBestParseTrees() []*ParseTree {
	if x != nil {
		return x.KBestParseTrees
	}
	return nil
}

func (x *Sentence) GetBasicDependencies() *DependencyGraph {
	if x != nil {
		return x.BasicDependencies
	}
	return nil
}

func (x *Sentence) GetCollapsedDependencies() *DependencyGraph {
	if x != nil {
		return x.CollapsedDependencies
	}
	return nil
}

func (x *Sentence) GetCollapsedCCProcessedDependencies() *DependencyGraph {
	if x != nil {
		return x.CollapsedCCProcessedDependencies
	}
	return nil
}

func (x *Sentence) GetAlternativeDependencies() *DependencyGraph {
	if x != nil {
		return x.AlternativeDependencies
	}
	return nil
}

func (x *Sentence) GetOpenieTriple() []*RelationTriple {
	if x != nil {
		return x.OpenieTriple
	}
	return nil
}

func (x *Sentence) GetKbpTriple() []*RelationTriple {
	if x != nil {
		return x.KbpTriple
	}
	return nil
}

func (x *Sentence) GetEntailedSentence() []*SentenceFragment {
	if x != nil {
		return x.EntailedSentence
	}
	return nil
}

func (x *Sentence) GetEntailedClause() []*SentenceFragment {
	if x != nil {
		return x.EntailedClause
	}
	return nil
}

func (x *Sentence) GetEnhancedDependencies() *DependencyGraph {
	if x != nil {
		return x.EnhancedDependencies
	}
	return nil
}

func (x *Sentence) GetEnhancedPlusPlusDependencies() *DependencyGraph {
	if x != nil {
		return x.EnhancedPlusPlusDependencies
	}
	return nil
}

func (x *Sentence) GetCharacter() []*Token {
	if x != nil {
		return x.Character
	}
	return nil
}

func (x *Sentence) GetParagraph() uint32 {
	if x != nil && x.Paragraph != nil {
		return *x.Paragraph
	}
	return 0
}

func (x *Sentence) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Sentence) GetLineNumber() uint32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

func (x *Sentence) GetHasRelationAnnotations() bool {
	if x != nil && x.HasRelationAnnotations != nil {
		return *x.HasRelationAnnotations
	}
	return false
}

func (x *Sentence) GetEntity() []*Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Sentence) GetRelation() []*Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *Sentence) GetHasNumerizedTokensAnnotation() bool {
	if x != nil && x.HasNumerizedTokensAnnotation != nil {
		return *x.HasNumerizedTokensAnnotation
	}
	return false
}

func (x *Sentence) GetMentions() []*NERMention {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *Sentence) GetMentionsForCoref() []*Mention {
	if x != nil {
		return x.MentionsForCoref
	}
	return nil
}

func (x *Sentence) GetHasCorefMentionsAnnotation() bool {
	if x != nil && x.HasCorefMentionsAnnotation != nil {
		return *x.HasCorefMentionsAnnotation
	}
	return false
}

func (x *Sentence) GetSentenceID() string {
	if x != nil && x.SentenceID != nil {
		return *x.SentenceID
	}
	return ""
}

func (x *Sentence) GetSectionDate() string {
	if x != nil && x.SectionDate != nil {
		return *x.SectionDate
	}
	return ""
}

func (x *Sentence) GetSectionIndex() uint32 {
	if x != nil && x.SectionIndex != nil {
		return *x.SectionIndex
	}
	return 0
}

func (x *Sentence) GetSectionName() string {
	if x != nil && x.SectionName != nil {
		return *x.SectionName
	}
	return ""
}

func (x *Sentence) GetSectionAuthor() string {
	if x != nil && x.SectionAuthor != nil {
		return *x.SectionAuthor
	}
	return ""
}

func (x *Sentence) GetDocID() string {
	if x != nil && x.DocID != nil {
		return *x.DocID
	}
	return ""
}

func (x *Sentence) GetSectionQuoted() bool {
	if x != nil && x.SectionQuoted != nil {
		return *x.SectionQuoted
	}
	return false
}

func (x *Sentence) GetHasEntityMentionsAnnotation() bool {
	if x != nil && x.HasEntityMentionsAnnotation != nil {
		return *x.HasEntityMentionsAnnotation
	}
	return false
}

func (x *Sentence) GetHasKBPTriplesAnnotation() bool {
	if x != nil && x.HasKBPTriplesAnnotation != nil {
		return *x.HasKBPTriplesAnnotation
	}
	return false
}

func (x *Sentence) GetHasOpenieTriplesAnnotation() bool {
	if x != nil && x.HasOpenieTriplesAnnotation != nil {
		return *x.HasOpenieTriplesAnnotation
	}
	return false
}

func (x *Sentence) GetChapterIndex() uint32 {
	if x != nil && x.ChapterIndex != nil {
		return *x.ChapterIndex
	}
	return 0
}

func (x *Sentence) GetParagraphIndex() uint32 {
	if x != nil && x.ParagraphIndex != nil {
		return *x.ParagraphIndex
	}
	return 0
}

func (x *Sentence) GetEnhancedSentence() *Sentence {
	if x != nil {
		return x.EnhancedSentence
	}
	return nil
}

func (x *Sentence) GetSpeaker() string {
	if x != nil && x.Speaker != nil {
		return *x.Speaker
	}
	return ""
}

func (x *Sentence) GetSpeakerType() string {
	if x != nil && x.SpeakerType != nil {
		return *x.SpeakerType
	}
	return ""
}

//
// The serialized version of a Token (a CoreLabel).
//
type Token struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Fields set by the default annotators [new CoreNLP(new Properties())]
	Word            *string  `protobuf:"bytes,1,opt,name=word" json:"word,omitempty"`                         // the word's gloss (post-tokenization)
	Pos             *string  `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`                           // The word's part of speech tag
	Value           *string  `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`                       // The word's 'value', (e.g., parse tree node)
	Category        *string  `protobuf:"bytes,4,opt,name=category" json:"category,omitempty"`                 // The word's 'category' (e.g., parse tree node)
	Before          *string  `protobuf:"bytes,5,opt,name=before" json:"before,omitempty"`                     // The whitespace/xml before the token
	After           *string  `protobuf:"bytes,6,opt,name=after" json:"after,omitempty"`                       // The whitespace/xml after the token
	OriginalText    *string  `protobuf:"bytes,7,opt,name=originalText" json:"originalText,omitempty"`         // The original text for this token
	Ner             *string  `protobuf:"bytes,8,opt,name=ner" json:"ner,omitempty"`                           // The word's NER tag
	CoarseNER       *string  `protobuf:"bytes,62,opt,name=coarseNER" json:"coarseNER,omitempty"`              // The word's coarse NER tag
	FineGrainedNER  *string  `protobuf:"bytes,63,opt,name=fineGrainedNER" json:"fineGrainedNER,omitempty"`    // The word's fine-grained NER tag
	NerLabelProbs   []string `protobuf:"bytes,66,rep,name=nerLabelProbs" json:"nerLabelProbs,omitempty"`      // listing of probs
	NormalizedNER   *string  `protobuf:"bytes,9,opt,name=normalizedNER" json:"normalizedNER,omitempty"`       // The word's normalized NER tag
	Lemma           *string  `protobuf:"bytes,10,opt,name=lemma" json:"lemma,omitempty"`                      // The word's lemma
	BeginChar       *uint32  `protobuf:"varint,11,opt,name=beginChar" json:"beginChar,omitempty"`             // The character offset begin, in the document
	EndChar         *uint32  `protobuf:"varint,12,opt,name=endChar" json:"endChar,omitempty"`                 // The character offset end, in the document
	Utterance       *uint32  `protobuf:"varint,13,opt,name=utterance" json:"utterance,omitempty"`             // The utterance tag used in dcoref
	Speaker         *string  `protobuf:"bytes,14,opt,name=speaker" json:"speaker,omitempty"`                  // The speaker speaking this word
	SpeakerType     *string  `protobuf:"bytes,77,opt,name=speakerType" json:"speakerType,omitempty"`          // The type of speaker speaking this word
	BeginIndex      *uint32  `protobuf:"varint,15,opt,name=beginIndex" json:"beginIndex,omitempty"`           // The begin index of, e.g., a span
	EndIndex        *uint32  `protobuf:"varint,16,opt,name=endIndex" json:"endIndex,omitempty"`               // The begin index of, e.g., a span
	TokenBeginIndex *uint32  `protobuf:"varint,17,opt,name=tokenBeginIndex" json:"tokenBeginIndex,omitempty"` // The begin index of the token
	TokenEndIndex   *uint32  `protobuf:"varint,18,opt,name=tokenEndIndex" json:"tokenEndIndex,omitempty"`     // The end index of the token
	TimexValue      *Timex   `protobuf:"bytes,19,opt,name=timexValue" json:"timexValue,omitempty"`            // The time this word refers to
	HasXmlContext   *bool    `protobuf:"varint,21,opt,name=hasXmlContext" json:"hasXmlContext,omitempty"`     // Used by clean xml annotator
	XmlContext      []string `protobuf:"bytes,22,rep,name=xmlContext" json:"xmlContext,omitempty"`            // Used by clean xml annotator
	CorefClusterID  *uint32  `protobuf:"varint,23,opt,name=corefClusterID" json:"corefClusterID,omitempty"`   // The [primary] cluster id for this token
	Answer          *string  `protobuf:"bytes,24,opt,name=answer" json:"answer,omitempty"`                    // A temporary annotation which is occasionally left in
	//  optional string projectedCategory = 25;   // The syntactic category of the maximal constituent headed by the word. Not used anywhere, so deleted.
	HeadWordIndex       *uint32          `protobuf:"varint,26,opt,name=headWordIndex" json:"headWordIndex,omitempty"`               // The index of the head word of this word.
	Operator            *Operator        `protobuf:"bytes,27,opt,name=operator" json:"operator,omitempty"`                          // If this is an operator, which one is it and what is its scope (as per Natural Logic)?
	Polarity            *Polarity        `protobuf:"bytes,28,opt,name=polarity" json:"polarity,omitempty"`                          // The polarity of this word, according to Natural Logic
	PolarityDir         *string          `protobuf:"bytes,39,opt,name=polarity_dir,json=polarityDir" json:"polarity_dir,omitempty"` // The polarity of this word, either "up", "down", or "flat"
	Span                *Span            `protobuf:"bytes,29,opt,name=span" json:"span,omitempty"`                                  // The span of a leaf node of a tree
	Sentiment           *string          `protobuf:"bytes,30,opt,name=sentiment" json:"sentiment,omitempty"`                        // The final sentiment of the sentence
	QuotationIndex      *int32           `protobuf:"varint,31,opt,name=quotationIndex" json:"quotationIndex,omitempty"`             // The index of the quotation this token refers to
	ConllUFeatures      *MapStringString `protobuf:"bytes,32,opt,name=conllUFeatures" json:"conllUFeatures,omitempty"`
	CoarseTag           *string          `protobuf:"bytes,33,opt,name=coarseTag" json:"coarseTag,omitempty"` //  The coarse POS tag (used to store the UPOS tag)
	ConllUTokenSpan     *Span            `protobuf:"bytes,34,opt,name=conllUTokenSpan" json:"conllUTokenSpan,omitempty"`
	ConllUMisc          *string          `protobuf:"bytes,35,opt,name=conllUMisc" json:"conllUMisc,omitempty"`
	ConllUSecondaryDeps *MapStringString `protobuf:"bytes,36,opt,name=conllUSecondaryDeps" json:"conllUSecondaryDeps,omitempty"`
	WikipediaEntity     *string          `protobuf:"bytes,37,opt,name=wikipediaEntity" json:"wikipediaEntity,omitempty"`
	IsNewline           *bool            `protobuf:"varint,38,opt,name=isNewline" json:"isNewline,omitempty"`
	// Fields set by other annotators in CoreNLP
	Gender       *string `protobuf:"bytes,51,opt,name=gender" json:"gender,omitempty"`             // gender annotation (machine reading)
	TrueCase     *string `protobuf:"bytes,52,opt,name=trueCase" json:"trueCase,omitempty"`         // true case type of token
	TrueCaseText *string `protobuf:"bytes,53,opt,name=trueCaseText" json:"trueCaseText,omitempty"` // true case gloss of token
	//  Chinese character info
	ChineseChar    *string `protobuf:"bytes,54,opt,name=chineseChar" json:"chineseChar,omitempty"`
	ChineseSeg     *string `protobuf:"bytes,55,opt,name=chineseSeg" json:"chineseSeg,omitempty"`
	ChineseXMLChar *string `protobuf:"bytes,60,opt,name=chineseXMLChar" json:"chineseXMLChar,omitempty"`
	//  Arabic character info
	ArabicSeg *string `protobuf:"bytes,76,opt,name=arabicSeg" json:"arabicSeg,omitempty"`
	// Section info
	SectionName     *string `protobuf:"bytes,56,opt,name=sectionName" json:"sectionName,omitempty"`
	SectionAuthor   *string `protobuf:"bytes,57,opt,name=sectionAuthor" json:"sectionAuthor,omitempty"`
	SectionDate     *string `protobuf:"bytes,58,opt,name=sectionDate" json:"sectionDate,omitempty"`
	SectionEndLabel *string `protobuf:"bytes,59,opt,name=sectionEndLabel" json:"sectionEndLabel,omitempty"`
	// French tokens have parents
	Parent *string `protobuf:"bytes,61,opt,name=parent" json:"parent,omitempty"`
	// mention index info
	CorefMentionIndex  []uint32 `protobuf:"varint,64,rep,name=corefMentionIndex" json:"corefMentionIndex,omitempty"`
	EntityMentionIndex *uint32  `protobuf:"varint,65,opt,name=entityMentionIndex" json:"entityMentionIndex,omitempty"`
	// mwt stuff
	IsMWT      *bool   `protobuf:"varint,67,opt,name=isMWT" json:"isMWT,omitempty"`
	IsFirstMWT *bool   `protobuf:"varint,68,opt,name=isFirstMWT" json:"isFirstMWT,omitempty"`
	MwtText    *string `protobuf:"bytes,69,opt,name=mwtText" json:"mwtText,omitempty"`
	// number info
	NumericValue          *uint64 `protobuf:"varint,70,opt,name=numericValue" json:"numericValue,omitempty"`
	NumericType           *string `protobuf:"bytes,71,opt,name=numericType" json:"numericType,omitempty"`
	NumericCompositeValue *uint64 `protobuf:"varint,72,opt,name=numericCompositeValue" json:"numericCompositeValue,omitempty"`
	NumericCompositeType  *string `protobuf:"bytes,73,opt,name=numericCompositeType" json:"numericCompositeType,omitempty"`
	CodepointOffsetBegin  *uint32 `protobuf:"varint,74,opt,name=codepointOffsetBegin" json:"codepointOffsetBegin,omitempty"`
	CodepointOffsetEnd    *uint32 `protobuf:"varint,75,opt,name=codepointOffsetEnd" json:"codepointOffsetEnd,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{2}
}

var extRange_Token = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 255},
}

// Deprecated: Use Token.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*Token) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_Token
}

func (x *Token) GetWord() string {
	if x != nil && x.Word != nil {
		return *x.Word
	}
	return ""
}

func (x *Token) GetPos() string {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return ""
}

func (x *Token) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Token) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *Token) GetBefore() string {
	if x != nil && x.Before != nil {
		return *x.Before
	}
	return ""
}

func (x *Token) GetAfter() string {
	if x != nil && x.After != nil {
		return *x.After
	}
	return ""
}

func (x *Token) GetOriginalText() string {
	if x != nil && x.OriginalText != nil {
		return *x.OriginalText
	}
	return ""
}

func (x *Token) GetNer() string {
	if x != nil && x.Ner != nil {
		return *x.Ner
	}
	return ""
}

func (x *Token) GetCoarseNER() string {
	if x != nil && x.CoarseNER != nil {
		return *x.CoarseNER
	}
	return ""
}

func (x *Token) GetFineGrainedNER() string {
	if x != nil && x.FineGrainedNER != nil {
		return *x.FineGrainedNER
	}
	return ""
}

func (x *Token) GetNerLabelProbs() []string {
	if x != nil {
		return x.NerLabelProbs
	}
	return nil
}

func (x *Token) GetNormalizedNER() string {
	if x != nil && x.NormalizedNER != nil {
		return *x.NormalizedNER
	}
	return ""
}

func (x *Token) GetLemma() string {
	if x != nil && x.Lemma != nil {
		return *x.Lemma
	}
	return ""
}

func (x *Token) GetBeginChar() uint32 {
	if x != nil && x.BeginChar != nil {
		return *x.BeginChar
	}
	return 0
}

func (x *Token) GetEndChar() uint32 {
	if x != nil && x.EndChar != nil {
		return *x.EndChar
	}
	return 0
}

func (x *Token) GetUtterance() uint32 {
	if x != nil && x.Utterance != nil {
		return *x.Utterance
	}
	return 0
}

func (x *Token) GetSpeaker() string {
	if x != nil && x.Speaker != nil {
		return *x.Speaker
	}
	return ""
}

func (x *Token) GetSpeakerType() string {
	if x != nil && x.SpeakerType != nil {
		return *x.SpeakerType
	}
	return ""
}

func (x *Token) GetBeginIndex() uint32 {
	if x != nil && x.BeginIndex != nil {
		return *x.BeginIndex
	}
	return 0
}

func (x *Token) GetEndIndex() uint32 {
	if x != nil && x.EndIndex != nil {
		return *x.EndIndex
	}
	return 0
}

func (x *Token) GetTokenBeginIndex() uint32 {
	if x != nil && x.TokenBeginIndex != nil {
		return *x.TokenBeginIndex
	}
	return 0
}

func (x *Token) GetTokenEndIndex() uint32 {
	if x != nil && x.TokenEndIndex != nil {
		return *x.TokenEndIndex
	}
	return 0
}

func (x *Token) GetTimexValue() *Timex {
	if x != nil {
		return x.TimexValue
	}
	return nil
}

func (x *Token) GetHasXmlContext() bool {
	if x != nil && x.HasXmlContext != nil {
		return *x.HasXmlContext
	}
	return false
}

func (x *Token) GetXmlContext() []string {
	if x != nil {
		return x.XmlContext
	}
	return nil
}

func (x *Token) GetCorefClusterID() uint32 {
	if x != nil && x.CorefClusterID != nil {
		return *x.CorefClusterID
	}
	return 0
}

func (x *Token) GetAnswer() string {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return ""
}

func (x *Token) GetHeadWordIndex() uint32 {
	if x != nil && x.HeadWordIndex != nil {
		return *x.HeadWordIndex
	}
	return 0
}

func (x *Token) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *Token) GetPolarity() *Polarity {
	if x != nil {
		return x.Polarity
	}
	return nil
}

func (x *Token) GetPolarityDir() string {
	if x != nil && x.PolarityDir != nil {
		return *x.PolarityDir
	}
	return ""
}

func (x *Token) GetSpan() *Span {
	if x != nil {
		return x.Span
	}
	return nil
}

func (x *Token) GetSentiment() string {
	if x != nil && x.Sentiment != nil {
		return *x.Sentiment
	}
	return ""
}

func (x *Token) GetQuotationIndex() int32 {
	if x != nil && x.QuotationIndex != nil {
		return *x.QuotationIndex
	}
	return 0
}

func (x *Token) GetConllUFeatures() *MapStringString {
	if x != nil {
		return x.ConllUFeatures
	}
	return nil
}

func (x *Token) GetCoarseTag() string {
	if x != nil && x.CoarseTag != nil {
		return *x.CoarseTag
	}
	return ""
}

func (x *Token) GetConllUTokenSpan() *Span {
	if x != nil {
		return x.ConllUTokenSpan
	}
	return nil
}

func (x *Token) GetConllUMisc() string {
	if x != nil && x.ConllUMisc != nil {
		return *x.ConllUMisc
	}
	return ""
}

func (x *Token) GetConllUSecondaryDeps() *MapStringString {
	if x != nil {
		return x.ConllUSecondaryDeps
	}
	return nil
}

func (x *Token) GetWikipediaEntity() string {
	if x != nil && x.WikipediaEntity != nil {
		return *x.WikipediaEntity
	}
	return ""
}

func (x *Token) GetIsNewline() bool {
	if x != nil && x.IsNewline != nil {
		return *x.IsNewline
	}
	return false
}

func (x *Token) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *Token) GetTrueCase() string {
	if x != nil && x.TrueCase != nil {
		return *x.TrueCase
	}
	return ""
}

func (x *Token) GetTrueCaseText() string {
	if x != nil && x.TrueCaseText != nil {
		return *x.TrueCaseText
	}
	return ""
}

func (x *Token) GetChineseChar() string {
	if x != nil && x.ChineseChar != nil {
		return *x.ChineseChar
	}
	return ""
}

func (x *Token) GetChineseSeg() string {
	if x != nil && x.ChineseSeg != nil {
		return *x.ChineseSeg
	}
	return ""
}

func (x *Token) GetChineseXMLChar() string {
	if x != nil && x.ChineseXMLChar != nil {
		return *x.ChineseXMLChar
	}
	return ""
}

func (x *Token) GetArabicSeg() string {
	if x != nil && x.ArabicSeg != nil {
		return *x.ArabicSeg
	}
	return ""
}

func (x *Token) GetSectionName() string {
	if x != nil && x.SectionName != nil {
		return *x.SectionName
	}
	return ""
}

func (x *Token) GetSectionAuthor() string {
	if x != nil && x.SectionAuthor != nil {
		return *x.SectionAuthor
	}
	return ""
}

func (x *Token) GetSectionDate() string {
	if x != nil && x.SectionDate != nil {
		return *x.SectionDate
	}
	return ""
}

func (x *Token) GetSectionEndLabel() string {
	if x != nil && x.SectionEndLabel != nil {
		return *x.SectionEndLabel
	}
	return ""
}

func (x *Token) GetParent() string {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return ""
}

func (x *Token) GetCorefMentionIndex() []uint32 {
	if x != nil {
		return x.CorefMentionIndex
	}
	return nil
}

func (x *Token) GetEntityMentionIndex() uint32 {
	if x != nil && x.EntityMentionIndex != nil {
		return *x.EntityMentionIndex
	}
	return 0
}

func (x *Token) GetIsMWT() bool {
	if x != nil && x.IsMWT != nil {
		return *x.IsMWT
	}
	return false
}

func (x *Token) GetIsFirstMWT() bool {
	if x != nil && x.IsFirstMWT != nil {
		return *x.IsFirstMWT
	}
	return false
}

func (x *Token) GetMwtText() string {
	if x != nil && x.MwtText != nil {
		return *x.MwtText
	}
	return ""
}

func (x *Token) GetNumericValue() uint64 {
	if x != nil && x.NumericValue != nil {
		return *x.NumericValue
	}
	return 0
}

func (x *Token) GetNumericType() string {
	if x != nil && x.NumericType != nil {
		return *x.NumericType
	}
	return ""
}

func (x *Token) GetNumericCompositeValue() uint64 {
	if x != nil && x.NumericCompositeValue != nil {
		return *x.NumericCompositeValue
	}
	return 0
}

func (x *Token) GetNumericCompositeType() string {
	if x != nil && x.NumericCompositeType != nil {
		return *x.NumericCompositeType
	}
	return ""
}

func (x *Token) GetCodepointOffsetBegin() uint32 {
	if x != nil && x.CodepointOffsetBegin != nil {
		return *x.CodepointOffsetBegin
	}
	return 0
}

func (x *Token) GetCodepointOffsetEnd() uint32 {
	if x != nil && x.CodepointOffsetEnd != nil {
		return *x.CodepointOffsetEnd
	}
	return 0
}

//
// A quotation marker in text
//
type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                       *string          `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Begin                      *uint32          `protobuf:"varint,2,opt,name=begin" json:"begin,omitempty"`
	End                        *uint32          `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
	SentenceBegin              *uint32          `protobuf:"varint,5,opt,name=sentenceBegin" json:"sentenceBegin,omitempty"`
	SentenceEnd                *uint32          `protobuf:"varint,6,opt,name=sentenceEnd" json:"sentenceEnd,omitempty"`
	TokenBegin                 *uint32          `protobuf:"varint,7,opt,name=tokenBegin" json:"tokenBegin,omitempty"`
	TokenEnd                   *uint32          `protobuf:"varint,8,opt,name=tokenEnd" json:"tokenEnd,omitempty"`
	Docid                      *string          `protobuf:"bytes,9,opt,name=docid" json:"docid,omitempty"`
	Index                      *uint32          `protobuf:"varint,10,opt,name=index" json:"index,omitempty"`
	Author                     *string          `protobuf:"bytes,11,opt,name=author" json:"author,omitempty"`
	Mention                    *string          `protobuf:"bytes,12,opt,name=mention" json:"mention,omitempty"`
	MentionBegin               *uint32          `protobuf:"varint,13,opt,name=mentionBegin" json:"mentionBegin,omitempty"`
	MentionEnd                 *uint32          `protobuf:"varint,14,opt,name=mentionEnd" json:"mentionEnd,omitempty"`
	MentionType                *string          `protobuf:"bytes,15,opt,name=mentionType" json:"mentionType,omitempty"`
	MentionSieve               *string          `protobuf:"bytes,16,opt,name=mentionSieve" json:"mentionSieve,omitempty"`
	Speaker                    *string          `protobuf:"bytes,17,opt,name=speaker" json:"speaker,omitempty"`
	SpeakerSieve               *string          `protobuf:"bytes,18,opt,name=speakerSieve" json:"speakerSieve,omitempty"`
	CanonicalMention           *string          `protobuf:"bytes,19,opt,name=canonicalMention" json:"canonicalMention,omitempty"`
	CanonicalMentionBegin      *uint32          `protobuf:"varint,20,opt,name=canonicalMentionBegin" json:"canonicalMentionBegin,omitempty"`
	CanonicalMentionEnd        *uint32          `protobuf:"varint,21,opt,name=canonicalMentionEnd" json:"canonicalMentionEnd,omitempty"`
	AttributionDependencyGraph *DependencyGraph `protobuf:"bytes,22,opt,name=attributionDependencyGraph" json:"attributionDependencyGraph,omitempty"`
}

func (x *Quote) Reset() {
	*x = Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{3}
}

func (x *Quote) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Quote) GetBegin() uint32 {
	if x != nil && x.Begin != nil {
		return *x.Begin
	}
	return 0
}

func (x *Quote) GetEnd() uint32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *Quote) GetSentenceBegin() uint32 {
	if x != nil && x.SentenceBegin != nil {
		return *x.SentenceBegin
	}
	return 0
}

func (x *Quote) GetSentenceEnd() uint32 {
	if x != nil && x.SentenceEnd != nil {
		return *x.SentenceEnd
	}
	return 0
}

func (x *Quote) GetTokenBegin() uint32 {
	if x != nil && x.TokenBegin != nil {
		return *x.TokenBegin
	}
	return 0
}

func (x *Quote) GetTokenEnd() uint32 {
	if x != nil && x.TokenEnd != nil {
		return *x.TokenEnd
	}
	return 0
}

func (x *Quote) GetDocid() string {
	if x != nil && x.Docid != nil {
		return *x.Docid
	}
	return ""
}

func (x *Quote) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Quote) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *Quote) GetMention() string {
	if x != nil && x.Mention != nil {
		return *x.Mention
	}
	return ""
}

func (x *Quote) GetMentionBegin() uint32 {
	if x != nil && x.MentionBegin != nil {
		return *x.MentionBegin
	}
	return 0
}

func (x *Quote) GetMentionEnd() uint32 {
	if x != nil && x.MentionEnd != nil {
		return *x.MentionEnd
	}
	return 0
}

func (x *Quote) GetMentionType() string {
	if x != nil && x.MentionType != nil {
		return *x.MentionType
	}
	return ""
}

func (x *Quote) GetMentionSieve() string {
	if x != nil && x.MentionSieve != nil {
		return *x.MentionSieve
	}
	return ""
}

func (x *Quote) GetSpeaker() string {
	if x != nil && x.Speaker != nil {
		return *x.Speaker
	}
	return ""
}

func (x *Quote) GetSpeakerSieve() string {
	if x != nil && x.SpeakerSieve != nil {
		return *x.SpeakerSieve
	}
	return ""
}

func (x *Quote) GetCanonicalMention() string {
	if x != nil && x.CanonicalMention != nil {
		return *x.CanonicalMention
	}
	return ""
}

func (x *Quote) GetCanonicalMentionBegin() uint32 {
	if x != nil && x.CanonicalMentionBegin != nil {
		return *x.CanonicalMentionBegin
	}
	return 0
}

func (x *Quote) GetCanonicalMentionEnd() uint32 {
	if x != nil && x.CanonicalMentionEnd != nil {
		return *x.CanonicalMentionEnd
	}
	return 0
}

func (x *Quote) GetAttributionDependencyGraph() *DependencyGraph {
	if x != nil {
		return x.AttributionDependencyGraph
	}
	return nil
}

//
// A syntactic parse tree, with scores.
//
type ParseTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child           []*ParseTree `protobuf:"bytes,1,rep,name=child" json:"child,omitempty"`
	Value           *string      `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	YieldBeginIndex *uint32      `protobuf:"varint,3,opt,name=yieldBeginIndex" json:"yieldBeginIndex,omitempty"`
	YieldEndIndex   *uint32      `protobuf:"varint,4,opt,name=yieldEndIndex" json:"yieldEndIndex,omitempty"`
	Score           *float64     `protobuf:"fixed64,5,opt,name=score" json:"score,omitempty"`
	Sentiment       *Sentiment   `protobuf:"varint,6,opt,name=sentiment,enum=edu.stanford.nlp.pipeline.Sentiment" json:"sentiment,omitempty"`
}

func (x *ParseTree) Reset() {
	*x = ParseTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTree) ProtoMessage() {}

func (x *ParseTree) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTree.ProtoReflect.Descriptor instead.
func (*ParseTree) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{4}
}

func (x *ParseTree) GetChild() []*ParseTree {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *ParseTree) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *ParseTree) GetYieldBeginIndex() uint32 {
	if x != nil && x.YieldBeginIndex != nil {
		return *x.YieldBeginIndex
	}
	return 0
}

func (x *ParseTree) GetYieldEndIndex() uint32 {
	if x != nil && x.YieldEndIndex != nil {
		return *x.YieldEndIndex
	}
	return 0
}

func (x *ParseTree) GetScore() float64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *ParseTree) GetSentiment() Sentiment {
	if x != nil && x.Sentiment != nil {
		return *x.Sentiment
	}
	return Sentiment_STRONG_NEGATIVE
}

//
// A dependency graph representation.
//
type DependencyGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node []*DependencyGraph_Node `protobuf:"bytes,1,rep,name=node" json:"node,omitempty"`
	Edge []*DependencyGraph_Edge `protobuf:"bytes,2,rep,name=edge" json:"edge,omitempty"`
	Root []uint32                `protobuf:"varint,3,rep,packed,name=root" json:"root,omitempty"`
}

func (x *DependencyGraph) Reset() {
	*x = DependencyGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyGraph) ProtoMessage() {}

func (x *DependencyGraph) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyGraph.ProtoReflect.Descriptor instead.
func (*DependencyGraph) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{5}
}

func (x *DependencyGraph) GetNode() []*DependencyGraph_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *DependencyGraph) GetEdge() []*DependencyGraph_Edge {
	if x != nil {
		return x.Edge
	}
	return nil
}

func (x *DependencyGraph) GetRoot() []uint32 {
	if x != nil {
		return x.Root
	}
	return nil
}

//
// A coreference chain.
// These fields are not *really* optional. CoreNLP will crash without them.
//
type CorefChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainID        *int32                     `protobuf:"varint,1,req,name=chainID" json:"chainID,omitempty"`
	Mention        []*CorefChain_CorefMention `protobuf:"bytes,2,rep,name=mention" json:"mention,omitempty"`
	Representative *uint32                    `protobuf:"varint,3,req,name=representative" json:"representative,omitempty"`
}

func (x *CorefChain) Reset() {
	*x = CorefChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorefChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorefChain) ProtoMessage() {}

func (x *CorefChain) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorefChain.ProtoReflect.Descriptor instead.
func (*CorefChain) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{6}
}

func (x *CorefChain) GetChainID() int32 {
	if x != nil && x.ChainID != nil {
		return *x.ChainID
	}
	return 0
}

func (x *CorefChain) GetMention() []*CorefChain_CorefMention {
	if x != nil {
		return x.Mention
	}
	return nil
}

func (x *CorefChain) GetRepresentative() uint32 {
	if x != nil && x.Representative != nil {
		return *x.Representative
	}
	return 0
}

type Mention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MentionID             *int32         `protobuf:"varint,1,opt,name=mentionID" json:"mentionID,omitempty"`
	MentionType           *string        `protobuf:"bytes,2,opt,name=mentionType" json:"mentionType,omitempty"`
	Number                *string        `protobuf:"bytes,3,opt,name=number" json:"number,omitempty"`
	Gender                *string        `protobuf:"bytes,4,opt,name=gender" json:"gender,omitempty"`
	Animacy               *string        `protobuf:"bytes,5,opt,name=animacy" json:"animacy,omitempty"`
	Person                *string        `protobuf:"bytes,6,opt,name=person" json:"person,omitempty"`
	StartIndex            *uint32        `protobuf:"varint,7,opt,name=startIndex" json:"startIndex,omitempty"`
	EndIndex              *uint32        `protobuf:"varint,9,opt,name=endIndex" json:"endIndex,omitempty"`
	HeadIndex             *int32         `protobuf:"varint,10,opt,name=headIndex" json:"headIndex,omitempty"`
	HeadString            *string        `protobuf:"bytes,11,opt,name=headString" json:"headString,omitempty"`
	NerString             *string        `protobuf:"bytes,12,opt,name=nerString" json:"nerString,omitempty"`
	OriginalRef           *int32         `protobuf:"varint,13,opt,name=originalRef" json:"originalRef,omitempty"`
	GoldCorefClusterID    *int32         `protobuf:"varint,14,opt,name=goldCorefClusterID" json:"goldCorefClusterID,omitempty"`
	CorefClusterID        *int32         `protobuf:"varint,15,opt,name=corefClusterID" json:"corefClusterID,omitempty"`
	MentionNum            *int32         `protobuf:"varint,16,opt,name=mentionNum" json:"mentionNum,omitempty"`
	SentNum               *int32         `protobuf:"varint,17,opt,name=sentNum" json:"sentNum,omitempty"`
	Utter                 *int32         `protobuf:"varint,18,opt,name=utter" json:"utter,omitempty"`
	Paragraph             *int32         `protobuf:"varint,19,opt,name=paragraph" json:"paragraph,omitempty"`
	IsSubject             *bool          `protobuf:"varint,20,opt,name=isSubject" json:"isSubject,omitempty"`
	IsDirectObject        *bool          `protobuf:"varint,21,opt,name=isDirectObject" json:"isDirectObject,omitempty"`
	IsIndirectObject      *bool          `protobuf:"varint,22,opt,name=isIndirectObject" json:"isIndirectObject,omitempty"`
	IsPrepositionObject   *bool          `protobuf:"varint,23,opt,name=isPrepositionObject" json:"isPrepositionObject,omitempty"`
	HasTwin               *bool          `protobuf:"varint,24,opt,name=hasTwin" json:"hasTwin,omitempty"`
	Generic               *bool          `protobuf:"varint,25,opt,name=generic" json:"generic,omitempty"`
	IsSingleton           *bool          `protobuf:"varint,26,opt,name=isSingleton" json:"isSingleton,omitempty"`
	HasBasicDependency    *bool          `protobuf:"varint,27,opt,name=hasBasicDependency" json:"hasBasicDependency,omitempty"`
	HasEnhancedDepenedncy *bool          `protobuf:"varint,28,opt,name=hasEnhancedDepenedncy" json:"hasEnhancedDepenedncy,omitempty"`
	HasContextParseTree   *bool          `protobuf:"varint,29,opt,name=hasContextParseTree" json:"hasContextParseTree,omitempty"`
	HeadIndexedWord       *IndexedWord   `protobuf:"bytes,30,opt,name=headIndexedWord" json:"headIndexedWord,omitempty"`
	DependingVerb         *IndexedWord   `protobuf:"bytes,31,opt,name=dependingVerb" json:"dependingVerb,omitempty"`
	HeadWord              *IndexedWord   `protobuf:"bytes,32,opt,name=headWord" json:"headWord,omitempty"`
	SpeakerInfo           *SpeakerInfo   `protobuf:"bytes,33,opt,name=speakerInfo" json:"speakerInfo,omitempty"`
	SentenceWords         []*IndexedWord `protobuf:"bytes,50,rep,name=sentenceWords" json:"sentenceWords,omitempty"`
	OriginalSpan          []*IndexedWord `protobuf:"bytes,51,rep,name=originalSpan" json:"originalSpan,omitempty"`
	Dependents            []string       `protobuf:"bytes,52,rep,name=dependents" json:"dependents,omitempty"`
	PreprocessedTerms     []string       `protobuf:"bytes,53,rep,name=preprocessedTerms" json:"preprocessedTerms,omitempty"`
	Appositions           []int32        `protobuf:"varint,54,rep,name=appositions" json:"appositions,omitempty"`
	PredicateNominatives  []int32        `protobuf:"varint,55,rep,name=predicateNominatives" json:"predicateNominatives,omitempty"`
	RelativePronouns      []int32        `protobuf:"varint,56,rep,name=relativePronouns" json:"relativePronouns,omitempty"`
	ListMembers           []int32        `protobuf:"varint,57,rep,name=listMembers" json:"listMembers,omitempty"`
	BelongToLists         []int32        `protobuf:"varint,58,rep,name=belongToLists" json:"belongToLists,omitempty"`
}

func (x *Mention) Reset() {
	*x = Mention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mention) ProtoMessage() {}

func (x *Mention) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mention.ProtoReflect.Descriptor instead.
func (*Mention) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{7}
}

func (x *Mention) GetMentionID() int32 {
	if x != nil && x.MentionID != nil {
		return *x.MentionID
	}
	return 0
}

func (x *Mention) GetMentionType() string {
	if x != nil && x.MentionType != nil {
		return *x.MentionType
	}
	return ""
}

func (x *Mention) GetNumber() string {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return ""
}

func (x *Mention) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *Mention) GetAnimacy() string {
	if x != nil && x.Animacy != nil {
		return *x.Animacy
	}
	return ""
}

func (x *Mention) GetPerson() string {
	if x != nil && x.Person != nil {
		return *x.Person
	}
	return ""
}

func (x *Mention) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

func (x *Mention) GetEndIndex() uint32 {
	if x != nil && x.EndIndex != nil {
		return *x.EndIndex
	}
	return 0
}

func (x *Mention) GetHeadIndex() int32 {
	if x != nil && x.HeadIndex != nil {
		return *x.HeadIndex
	}
	return 0
}

func (x *Mention) GetHeadString() string {
	if x != nil && x.HeadString != nil {
		return *x.HeadString
	}
	return ""
}

func (x *Mention) GetNerString() string {
	if x != nil && x.NerString != nil {
		return *x.NerString
	}
	return ""
}

func (x *Mention) GetOriginalRef() int32 {
	if x != nil && x.OriginalRef != nil {
		return *x.OriginalRef
	}
	return 0
}

func (x *Mention) GetGoldCorefClusterID() int32 {
	if x != nil && x.GoldCorefClusterID != nil {
		return *x.GoldCorefClusterID
	}
	return 0
}

func (x *Mention) GetCorefClusterID() int32 {
	if x != nil && x.CorefClusterID != nil {
		return *x.CorefClusterID
	}
	return 0
}

func (x *Mention) GetMentionNum() int32 {
	if x != nil && x.MentionNum != nil {
		return *x.MentionNum
	}
	return 0
}

func (x *Mention) GetSentNum() int32 {
	if x != nil && x.SentNum != nil {
		return *x.SentNum
	}
	return 0
}

func (x *Mention) GetUtter() int32 {
	if x != nil && x.Utter != nil {
		return *x.Utter
	}
	return 0
}

func (x *Mention) GetParagraph() int32 {
	if x != nil && x.Paragraph != nil {
		return *x.Paragraph
	}
	return 0
}

func (x *Mention) GetIsSubject() bool {
	if x != nil && x.IsSubject != nil {
		return *x.IsSubject
	}
	return false
}

func (x *Mention) GetIsDirectObject() bool {
	if x != nil && x.IsDirectObject != nil {
		return *x.IsDirectObject
	}
	return false
}

func (x *Mention) GetIsIndirectObject() bool {
	if x != nil && x.IsIndirectObject != nil {
		return *x.IsIndirectObject
	}
	return false
}

func (x *Mention) GetIsPrepositionObject() bool {
	if x != nil && x.IsPrepositionObject != nil {
		return *x.IsPrepositionObject
	}
	return false
}

func (x *Mention) GetHasTwin() bool {
	if x != nil && x.HasTwin != nil {
		return *x.HasTwin
	}
	return false
}

func (x *Mention) GetGeneric() bool {
	if x != nil && x.Generic != nil {
		return *x.Generic
	}
	return false
}

func (x *Mention) GetIsSingleton() bool {
	if x != nil && x.IsSingleton != nil {
		return *x.IsSingleton
	}
	return false
}

func (x *Mention) GetHasBasicDependency() bool {
	if x != nil && x.HasBasicDependency != nil {
		return *x.HasBasicDependency
	}
	return false
}

func (x *Mention) GetHasEnhancedDepenedncy() bool {
	if x != nil && x.HasEnhancedDepenedncy != nil {
		return *x.HasEnhancedDepenedncy
	}
	return false
}

func (x *Mention) GetHasContextParseTree() bool {
	if x != nil && x.HasContextParseTree != nil {
		return *x.HasContextParseTree
	}
	return false
}

func (x *Mention) GetHeadIndexedWord() *IndexedWord {
	if x != nil {
		return x.HeadIndexedWord
	}
	return nil
}

func (x *Mention) GetDependingVerb() *IndexedWord {
	if x != nil {
		return x.DependingVerb
	}
	return nil
}

func (x *Mention) GetHeadWord() *IndexedWord {
	if x != nil {
		return x.HeadWord
	}
	return nil
}

func (x *Mention) GetSpeakerInfo() *SpeakerInfo {
	if x != nil {
		return x.SpeakerInfo
	}
	return nil
}

func (x *Mention) GetSentenceWords() []*IndexedWord {
	if x != nil {
		return x.SentenceWords
	}
	return nil
}

func (x *Mention) GetOriginalSpan() []*IndexedWord {
	if x != nil {
		return x.OriginalSpan
	}
	return nil
}

func (x *Mention) GetDependents() []string {
	if x != nil {
		return x.Dependents
	}
	return nil
}

func (x *Mention) GetPreprocessedTerms() []string {
	if x != nil {
		return x.PreprocessedTerms
	}
	return nil
}

func (x *Mention) GetAppositions() []int32 {
	if x != nil {
		return x.Appositions
	}
	return nil
}

func (x *Mention) GetPredicateNominatives() []int32 {
	if x != nil {
		return x.PredicateNominatives
	}
	return nil
}

func (x *Mention) GetRelativePronouns() []int32 {
	if x != nil {
		return x.RelativePronouns
	}
	return nil
}

func (x *Mention) GetListMembers() []int32 {
	if x != nil {
		return x.ListMembers
	}
	return nil
}

func (x *Mention) GetBelongToLists() []int32 {
	if x != nil {
		return x.BelongToLists
	}
	return nil
}

type IndexedWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SentenceNum *int32  `protobuf:"varint,1,opt,name=sentenceNum" json:"sentenceNum,omitempty"`
	TokenIndex  *int32  `protobuf:"varint,2,opt,name=tokenIndex" json:"tokenIndex,omitempty"`
	DocID       *int32  `protobuf:"varint,3,opt,name=docID" json:"docID,omitempty"`
	CopyCount   *uint32 `protobuf:"varint,4,opt,name=copyCount" json:"copyCount,omitempty"`
}

func (x *IndexedWord) Reset() {
	*x = IndexedWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexedWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexedWord) ProtoMessage() {}

func (x *IndexedWord) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexedWord.ProtoReflect.Descriptor instead.
func (*IndexedWord) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{8}
}

func (x *IndexedWord) GetSentenceNum() int32 {
	if x != nil && x.SentenceNum != nil {
		return *x.SentenceNum
	}
	return 0
}

func (x *IndexedWord) GetTokenIndex() int32 {
	if x != nil && x.TokenIndex != nil {
		return *x.TokenIndex
	}
	return 0
}

func (x *IndexedWord) GetDocID() int32 {
	if x != nil && x.DocID != nil {
		return *x.DocID
	}
	return 0
}

func (x *IndexedWord) GetCopyCount() uint32 {
	if x != nil && x.CopyCount != nil {
		return *x.CopyCount
	}
	return 0
}

type SpeakerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeakerName *string `protobuf:"bytes,1,opt,name=speakerName" json:"speakerName,omitempty"`
	Mentions    []int32 `protobuf:"varint,2,rep,name=mentions" json:"mentions,omitempty"`
}

func (x *SpeakerInfo) Reset() {
	*x = SpeakerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerInfo) ProtoMessage() {}

func (x *SpeakerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerInfo.ProtoReflect.Descriptor instead.
func (*SpeakerInfo) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{9}
}

func (x *SpeakerInfo) GetSpeakerName() string {
	if x != nil && x.SpeakerName != nil {
		return *x.SpeakerName
	}
	return ""
}

func (x *SpeakerInfo) GetMentions() []int32 {
	if x != nil {
		return x.Mentions
	}
	return nil
}

//
// A Span of text
//
type Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin *uint32 `protobuf:"varint,1,req,name=begin" json:"begin,omitempty"`
	End   *uint32 `protobuf:"varint,2,req,name=end" json:"end,omitempty"`
}

func (x *Span) Reset() {
	*x = Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{10}
}

func (x *Span) GetBegin() uint32 {
	if x != nil && x.Begin != nil {
		return *x.Begin
	}
	return 0
}

func (x *Span) GetEnd() uint32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

//
// A Timex object, representing a temporal expression (TIMe EXpression)
// These fields are not *really* optional. CoreNLP will crash without them.
//
type Timex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      *string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	AltValue   *string `protobuf:"bytes,2,opt,name=altValue" json:"altValue,omitempty"`
	Text       *string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	Type       *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Tid        *string `protobuf:"bytes,5,opt,name=tid" json:"tid,omitempty"`
	BeginPoint *uint32 `protobuf:"varint,6,opt,name=beginPoint" json:"beginPoint,omitempty"`
	EndPoint   *uint32 `protobuf:"varint,7,opt,name=endPoint" json:"endPoint,omitempty"`
}

func (x *Timex) Reset() {
	*x = Timex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timex) ProtoMessage() {}

func (x *Timex) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timex.ProtoReflect.Descriptor instead.
func (*Timex) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{11}
}

func (x *Timex) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Timex) GetAltValue() string {
	if x != nil && x.AltValue != nil {
		return *x.AltValue
	}
	return ""
}

func (x *Timex) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Timex) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Timex) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *Timex) GetBeginPoint() uint32 {
	if x != nil && x.BeginPoint != nil {
		return *x.BeginPoint
	}
	return 0
}

func (x *Timex) GetEndPoint() uint32 {
	if x != nil && x.EndPoint != nil {
		return *x.EndPoint
	}
	return 0
}

//
// A representation of an entity in a relation.
// This corresponds to the EntityMention, and more broadly the
// ExtractionObject classes.
//
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadStart      *uint32 `protobuf:"varint,6,opt,name=headStart" json:"headStart,omitempty"`
	HeadEnd        *uint32 `protobuf:"varint,7,opt,name=headEnd" json:"headEnd,omitempty"`
	MentionType    *string `protobuf:"bytes,8,opt,name=mentionType" json:"mentionType,omitempty"`
	NormalizedName *string `protobuf:"bytes,9,opt,name=normalizedName" json:"normalizedName,omitempty"`
	HeadTokenIndex *uint32 `protobuf:"varint,10,opt,name=headTokenIndex" json:"headTokenIndex,omitempty"`
	CorefID        *string `protobuf:"bytes,11,opt,name=corefID" json:"corefID,omitempty"`
	// inherited from ExtractionObject
	ObjectID    *string `protobuf:"bytes,1,opt,name=objectID" json:"objectID,omitempty"`
	ExtentStart *uint32 `protobuf:"varint,2,opt,name=extentStart" json:"extentStart,omitempty"`
	ExtentEnd   *uint32 `protobuf:"varint,3,opt,name=extentEnd" json:"extentEnd,omitempty"`
	Type        *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Subtype     *string `protobuf:"bytes,5,opt,name=subtype" json:"subtype,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{12}
}

func (x *Entity) GetHeadStart() uint32 {
	if x != nil && x.HeadStart != nil {
		return *x.HeadStart
	}
	return 0
}

func (x *Entity) GetHeadEnd() uint32 {
	if x != nil && x.HeadEnd != nil {
		return *x.HeadEnd
	}
	return 0
}

func (x *Entity) GetMentionType() string {
	if x != nil && x.MentionType != nil {
		return *x.MentionType
	}
	return ""
}

func (x *Entity) GetNormalizedName() string {
	if x != nil && x.NormalizedName != nil {
		return *x.NormalizedName
	}
	return ""
}

func (x *Entity) GetHeadTokenIndex() uint32 {
	if x != nil && x.HeadTokenIndex != nil {
		return *x.HeadTokenIndex
	}
	return 0
}

func (x *Entity) GetCorefID() string {
	if x != nil && x.CorefID != nil {
		return *x.CorefID
	}
	return ""
}

func (x *Entity) GetObjectID() string {
	if x != nil && x.ObjectID != nil {
		return *x.ObjectID
	}
	return ""
}

func (x *Entity) GetExtentStart() uint32 {
	if x != nil && x.ExtentStart != nil {
		return *x.ExtentStart
	}
	return 0
}

func (x *Entity) GetExtentEnd() uint32 {
	if x != nil && x.ExtentEnd != nil {
		return *x.ExtentEnd
	}
	return 0
}

func (x *Entity) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Entity) GetSubtype() string {
	if x != nil && x.Subtype != nil {
		return *x.Subtype
	}
	return ""
}

//
// A representation of a relation, mirroring RelationMention
//
type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgName   []string  `protobuf:"bytes,6,rep,name=argName" json:"argName,omitempty"`
	Arg       []*Entity `protobuf:"bytes,7,rep,name=arg" json:"arg,omitempty"`
	Signature *string   `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
	// inherited from ExtractionObject
	ObjectID    *string `protobuf:"bytes,1,opt,name=objectID" json:"objectID,omitempty"`
	ExtentStart *uint32 `protobuf:"varint,2,opt,name=extentStart" json:"extentStart,omitempty"`
	ExtentEnd   *uint32 `protobuf:"varint,3,opt,name=extentEnd" json:"extentEnd,omitempty"`
	Type        *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Subtype     *string `protobuf:"bytes,5,opt,name=subtype" json:"subtype,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{13}
}

func (x *Relation) GetArgName() []string {
	if x != nil {
		return x.ArgName
	}
	return nil
}

func (x *Relation) GetArg() []*Entity {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *Relation) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *Relation) GetObjectID() string {
	if x != nil && x.ObjectID != nil {
		return *x.ObjectID
	}
	return ""
}

func (x *Relation) GetExtentStart() uint32 {
	if x != nil && x.ExtentStart != nil {
		return *x.ExtentStart
	}
	return 0
}

func (x *Relation) GetExtentEnd() uint32 {
	if x != nil && x.ExtentEnd != nil {
		return *x.ExtentEnd
	}
	return 0
}

func (x *Relation) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Relation) GetSubtype() string {
	if x != nil && x.Subtype != nil {
		return *x.Subtype
	}
	return ""
}

//
// A Natural Logic operator
//
type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	QuantifierSpanBegin *int32  `protobuf:"varint,2,req,name=quantifierSpanBegin" json:"quantifierSpanBegin,omitempty"`
	QuantifierSpanEnd   *int32  `protobuf:"varint,3,req,name=quantifierSpanEnd" json:"quantifierSpanEnd,omitempty"`
	SubjectSpanBegin    *int32  `protobuf:"varint,4,req,name=subjectSpanBegin" json:"subjectSpanBegin,omitempty"`
	SubjectSpanEnd      *int32  `protobuf:"varint,5,req,name=subjectSpanEnd" json:"subjectSpanEnd,omitempty"`
	ObjectSpanBegin     *int32  `protobuf:"varint,6,req,name=objectSpanBegin" json:"objectSpanBegin,omitempty"`
	ObjectSpanEnd       *int32  `protobuf:"varint,7,req,name=objectSpanEnd" json:"objectSpanEnd,omitempty"`
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{14}
}

func (x *Operator) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Operator) GetQuantifierSpanBegin() int32 {
	if x != nil && x.QuantifierSpanBegin != nil {
		return *x.QuantifierSpanBegin
	}
	return 0
}

func (x *Operator) GetQuantifierSpanEnd() int32 {
	if x != nil && x.QuantifierSpanEnd != nil {
		return *x.QuantifierSpanEnd
	}
	return 0
}

func (x *Operator) GetSubjectSpanBegin() int32 {
	if x != nil && x.SubjectSpanBegin != nil {
		return *x.SubjectSpanBegin
	}
	return 0
}

func (x *Operator) GetSubjectSpanEnd() int32 {
	if x != nil && x.SubjectSpanEnd != nil {
		return *x.SubjectSpanEnd
	}
	return 0
}

func (x *Operator) GetObjectSpanBegin() int32 {
	if x != nil && x.ObjectSpanBegin != nil {
		return *x.ObjectSpanBegin
	}
	return 0
}

func (x *Operator) GetObjectSpanEnd() int32 {
	if x != nil && x.ObjectSpanEnd != nil {
		return *x.ObjectSpanEnd
	}
	return 0
}

//
// The polarity of a word, according to Natural Logic
//
type Polarity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectEquivalence       *NaturalLogicRelation `protobuf:"varint,1,req,name=projectEquivalence,enum=edu.stanford.nlp.pipeline.NaturalLogicRelation" json:"projectEquivalence,omitempty"`
	ProjectForwardEntailment *NaturalLogicRelation `protobuf:"varint,2,req,name=projectForwardEntailment,enum=edu.stanford.nlp.pipeline.NaturalLogicRelation" json:"projectForwardEntailment,omitempty"`
	ProjectReverseEntailment *NaturalLogicRelation `protobuf:"varint,3,req,name=projectReverseEntailment,enum=edu.stanford.nlp.pipeline.NaturalLogicRelation" json:"projectReverseEntailment,omitempty"`
	ProjectNegation          *NaturalLogicRelation `protobuf:"varint,4,req,name=projectNegation,enum=edu.stanford.nlp.pipeline.NaturalLogicRelation" json:"projectNegation,omitempty"`
	ProjectAlternation       *NaturalLogicRelation `protobuf:"varint,5,req,name=projectAlternation,enum=edu.stanford.nlp.pipeline.NaturalLogicRelation" json:"projectAlternation,omitempty"`
	ProjectCover             *NaturalLogicRelation `protobuf:"varint,6,req,name=projectCover,enum=edu.stanford.nlp.pipeline.NaturalLogicRelation" json:"projectCover,omitempty"`
	ProjectIndependence      *NaturalLogicRelation `protobuf:"varint,7,req,name=projectIndependence,enum=edu.stanford.nlp.pipeline.NaturalLogicRelation" json:"projectIndependence,omitempty"`
}

func (x *Polarity) Reset() {
	*x = Polarity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Polarity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polarity) ProtoMessage() {}

func (x *Polarity) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polarity.ProtoReflect.Descriptor instead.
func (*Polarity) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{15}
}

func (x *Polarity) GetProjectEquivalence() NaturalLogicRelation {
	if x != nil && x.ProjectEquivalence != nil {
		return *x.ProjectEquivalence
	}
	return NaturalLogicRelation_EQUIVALENCE
}

func (x *Polarity) GetProjectForwardEntailment() NaturalLogicRelation {
	if x != nil && x.ProjectForwardEntailment != nil {
		return *x.ProjectForwardEntailment
	}
	return NaturalLogicRelation_EQUIVALENCE
}

func (x *Polarity) GetProjectReverseEntailment() NaturalLogicRelation {
	if x != nil && x.ProjectReverseEntailment != nil {
		return *x.ProjectReverseEntailment
	}
	return NaturalLogicRelation_EQUIVALENCE
}

func (x *Polarity) GetProjectNegation() NaturalLogicRelation {
	if x != nil && x.ProjectNegation != nil {
		return *x.ProjectNegation
	}
	return NaturalLogicRelation_EQUIVALENCE
}

func (x *Polarity) GetProjectAlternation() NaturalLogicRelation {
	if x != nil && x.ProjectAlternation != nil {
		return *x.ProjectAlternation
	}
	return NaturalLogicRelation_EQUIVALENCE
}

func (x *Polarity) GetProjectCover() NaturalLogicRelation {
	if x != nil && x.ProjectCover != nil {
		return *x.ProjectCover
	}
	return NaturalLogicRelation_EQUIVALENCE
}

func (x *Polarity) GetProjectIndependence() NaturalLogicRelation {
	if x != nil && x.ProjectIndependence != nil {
		return *x.ProjectIndependence
	}
	return NaturalLogicRelation_EQUIVALENCE
}

//
// An NER mention in the text
//
type NERMention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SentenceIndex                 *uint32 `protobuf:"varint,1,opt,name=sentenceIndex" json:"sentenceIndex,omitempty"`
	TokenStartInSentenceInclusive *uint32 `protobuf:"varint,2,req,name=tokenStartInSentenceInclusive" json:"tokenStartInSentenceInclusive,omitempty"`
	TokenEndInSentenceExclusive   *uint32 `protobuf:"varint,3,req,name=tokenEndInSentenceExclusive" json:"tokenEndInSentenceExclusive,omitempty"`
	Ner                           *string `protobuf:"bytes,4,req,name=ner" json:"ner,omitempty"`
	NormalizedNER                 *string `protobuf:"bytes,5,opt,name=normalizedNER" json:"normalizedNER,omitempty"`
	EntityType                    *string `protobuf:"bytes,6,opt,name=entityType" json:"entityType,omitempty"`
	Timex                         *Timex  `protobuf:"bytes,7,opt,name=timex" json:"timex,omitempty"`
	WikipediaEntity               *string `protobuf:"bytes,8,opt,name=wikipediaEntity" json:"wikipediaEntity,omitempty"`
	Gender                        *string `protobuf:"bytes,9,opt,name=gender" json:"gender,omitempty"`
	EntityMentionIndex            *uint32 `protobuf:"varint,10,opt,name=entityMentionIndex" json:"entityMentionIndex,omitempty"`
	CanonicalEntityMentionIndex   *uint32 `protobuf:"varint,11,opt,name=canonicalEntityMentionIndex" json:"canonicalEntityMentionIndex,omitempty"`
	EntityMentionText             *string `protobuf:"bytes,12,opt,name=entityMentionText" json:"entityMentionText,omitempty"`
}

func (x *NERMention) Reset() {
	*x = NERMention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NERMention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NERMention) ProtoMessage() {}

func (x *NERMention) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NERMention.ProtoReflect.Descriptor instead.
func (*NERMention) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{16}
}

func (x *NERMention) GetSentenceIndex() uint32 {
	if x != nil && x.SentenceIndex != nil {
		return *x.SentenceIndex
	}
	return 0
}

func (x *NERMention) GetTokenStartInSentenceInclusive() uint32 {
	if x != nil && x.TokenStartInSentenceInclusive != nil {
		return *x.TokenStartInSentenceInclusive
	}
	return 0
}

func (x *NERMention) GetTokenEndInSentenceExclusive() uint32 {
	if x != nil && x.TokenEndInSentenceExclusive != nil {
		return *x.TokenEndInSentenceExclusive
	}
	return 0
}

func (x *NERMention) GetNer() string {
	if x != nil && x.Ner != nil {
		return *x.Ner
	}
	return ""
}

func (x *NERMention) GetNormalizedNER() string {
	if x != nil && x.NormalizedNER != nil {
		return *x.NormalizedNER
	}
	return ""
}

func (x *NERMention) GetEntityType() string {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return ""
}

func (x *NERMention) GetTimex() *Timex {
	if x != nil {
		return x.Timex
	}
	return nil
}

func (x *NERMention) GetWikipediaEntity() string {
	if x != nil && x.WikipediaEntity != nil {
		return *x.WikipediaEntity
	}
	return ""
}

func (x *NERMention) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *NERMention) GetEntityMentionIndex() uint32 {
	if x != nil && x.EntityMentionIndex != nil {
		return *x.EntityMentionIndex
	}
	return 0
}

func (x *NERMention) GetCanonicalEntityMentionIndex() uint32 {
	if x != nil && x.CanonicalEntityMentionIndex != nil {
		return *x.CanonicalEntityMentionIndex
	}
	return 0
}

func (x *NERMention) GetEntityMentionText() string {
	if x != nil && x.EntityMentionText != nil {
		return *x.EntityMentionText
	}
	return ""
}

//
// An entailed sentence fragment.
// Created by the openie annotator.
//
type SentenceFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenIndex   []uint32 `protobuf:"varint,1,rep,name=tokenIndex" json:"tokenIndex,omitempty"`
	Root         *uint32  `protobuf:"varint,2,opt,name=root" json:"root,omitempty"`
	AssumedTruth *bool    `protobuf:"varint,3,opt,name=assumedTruth" json:"assumedTruth,omitempty"`
	Score        *float64 `protobuf:"fixed64,4,opt,name=score" json:"score,omitempty"`
}

func (x *SentenceFragment) Reset() {
	*x = SentenceFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentenceFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentenceFragment) ProtoMessage() {}

func (x *SentenceFragment) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentenceFragment.ProtoReflect.Descriptor instead.
func (*SentenceFragment) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{17}
}

func (x *SentenceFragment) GetTokenIndex() []uint32 {
	if x != nil {
		return x.TokenIndex
	}
	return nil
}

func (x *SentenceFragment) GetRoot() uint32 {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return 0
}

func (x *SentenceFragment) GetAssumedTruth() bool {
	if x != nil && x.AssumedTruth != nil {
		return *x.AssumedTruth
	}
	return false
}

func (x *SentenceFragment) GetScore() float64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

//
// The index of a token in a document, including the sentence
// index and the offset.
//
type TokenLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SentenceIndex *uint32 `protobuf:"varint,1,opt,name=sentenceIndex" json:"sentenceIndex,omitempty"`
	TokenIndex    *uint32 `protobuf:"varint,2,opt,name=tokenIndex" json:"tokenIndex,omitempty"`
}

func (x *TokenLocation) Reset() {
	*x = TokenLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenLocation) ProtoMessage() {}

func (x *TokenLocation) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenLocation.ProtoReflect.Descriptor instead.
func (*TokenLocation) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{18}
}

func (x *TokenLocation) GetSentenceIndex() uint32 {
	if x != nil && x.SentenceIndex != nil {
		return *x.SentenceIndex
	}
	return 0
}

func (x *TokenLocation) GetTokenIndex() uint32 {
	if x != nil && x.TokenIndex != nil {
		return *x.TokenIndex
	}
	return 0
}

//
// An OpenIE relation triple.
// Created by the openie annotator.
//
type RelationTriple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject        *string          `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`                // The surface form of the subject
	Relation       *string          `protobuf:"bytes,2,opt,name=relation" json:"relation,omitempty"`              // The surface form of the relation (required)
	Object         *string          `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`                  // The surface form of the object
	Confidence     *float64         `protobuf:"fixed64,4,opt,name=confidence" json:"confidence,omitempty"`        // The [optional] confidence of the extraction
	SubjectTokens  []*TokenLocation `protobuf:"bytes,13,rep,name=subjectTokens" json:"subjectTokens,omitempty"`   // The tokens comprising the subject of the triple
	RelationTokens []*TokenLocation `protobuf:"bytes,14,rep,name=relationTokens" json:"relationTokens,omitempty"` // The tokens comprising the relation of the triple
	ObjectTokens   []*TokenLocation `protobuf:"bytes,15,rep,name=objectTokens" json:"objectTokens,omitempty"`     // The tokens comprising the object of the triple
	Tree           *DependencyGraph `protobuf:"bytes,8,opt,name=tree" json:"tree,omitempty"`                      // The dependency graph fragment for this triple
	Istmod         *bool            `protobuf:"varint,9,opt,name=istmod" json:"istmod,omitempty"`                 // If true, this expresses an implicit tmod relation
	PrefixBe       *bool            `protobuf:"varint,10,opt,name=prefixBe" json:"prefixBe,omitempty"`            // If true, this relation string is missing a 'be' prefix
	SuffixBe       *bool            `protobuf:"varint,11,opt,name=suffixBe" json:"suffixBe,omitempty"`            // If true, this relation string is missing a 'be' suffix
	SuffixOf       *bool            `protobuf:"varint,12,opt,name=suffixOf" json:"suffixOf,omitempty"`            // If true, this relation string is missing a 'of' prefix
}

func (x *RelationTriple) Reset() {
	*x = RelationTriple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationTriple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationTriple) ProtoMessage() {}

func (x *RelationTriple) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationTriple.ProtoReflect.Descriptor instead.
func (*RelationTriple) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{19}
}

func (x *RelationTriple) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *RelationTriple) GetRelation() string {
	if x != nil && x.Relation != nil {
		return *x.Relation
	}
	return ""
}

func (x *RelationTriple) GetObject() string {
	if x != nil && x.Object != nil {
		return *x.Object
	}
	return ""
}

func (x *RelationTriple) GetConfidence() float64 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

func (x *RelationTriple) GetSubjectTokens() []*TokenLocation {
	if x != nil {
		return x.SubjectTokens
	}
	return nil
}

func (x *RelationTriple) GetRelationTokens() []*TokenLocation {
	if x != nil {
		return x.RelationTokens
	}
	return nil
}

func (x *RelationTriple) GetObjectTokens() []*TokenLocation {
	if x != nil {
		return x.ObjectTokens
	}
	return nil
}

func (x *RelationTriple) GetTree() *DependencyGraph {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *RelationTriple) GetIstmod() bool {
	if x != nil && x.Istmod != nil {
		return *x.Istmod
	}
	return false
}

func (x *RelationTriple) GetPrefixBe() bool {
	if x != nil && x.PrefixBe != nil {
		return *x.PrefixBe
	}
	return false
}

func (x *RelationTriple) GetSuffixBe() bool {
	if x != nil && x.SuffixBe != nil {
		return *x.SuffixBe
	}
	return false
}

func (x *RelationTriple) GetSuffixOf() bool {
	if x != nil && x.SuffixOf != nil {
		return *x.SuffixOf
	}
	return false
}

//
// A map from strings to strings.
// Used, minimally, in the CoNLLU featurizer
//
type MapStringString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []string `protobuf:"bytes,1,rep,name=key" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
}

func (x *MapStringString) Reset() {
	*x = MapStringString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringString) ProtoMessage() {}

func (x *MapStringString) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringString.ProtoReflect.Descriptor instead.
func (*MapStringString) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{20}
}

func (x *MapStringString) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MapStringString) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

//
// A map from integers to strings.
// Used, minimally, in the CoNLLU featurizer
//
type MapIntString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []uint32 `protobuf:"varint,1,rep,name=key" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
}

func (x *MapIntString) Reset() {
	*x = MapIntString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapIntString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapIntString) ProtoMessage() {}

func (x *MapIntString) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapIntString.ProtoReflect.Descriptor instead.
func (*MapIntString) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{21}
}

func (x *MapIntString) GetKey() []uint32 {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MapIntString) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharBegin       *uint32  `protobuf:"varint,1,req,name=charBegin" json:"charBegin,omitempty"`
	CharEnd         *uint32  `protobuf:"varint,2,req,name=charEnd" json:"charEnd,omitempty"`
	Author          *string  `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	SentenceIndexes []uint32 `protobuf:"varint,4,rep,name=sentenceIndexes" json:"sentenceIndexes,omitempty"`
	Datetime        *string  `protobuf:"bytes,5,opt,name=datetime" json:"datetime,omitempty"`
	Quotes          []*Quote `protobuf:"bytes,6,rep,name=quotes" json:"quotes,omitempty"`
	AuthorCharBegin *uint32  `protobuf:"varint,7,opt,name=authorCharBegin" json:"authorCharBegin,omitempty"`
	AuthorCharEnd   *uint32  `protobuf:"varint,8,opt,name=authorCharEnd" json:"authorCharEnd,omitempty"`
	XmlTag          *Token   `protobuf:"bytes,9,req,name=xmlTag" json:"xmlTag,omitempty"`
}

func (x *Section) Reset() {
	*x = Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Section) ProtoMessage() {}

func (x *Section) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Section.ProtoReflect.Descriptor instead.
func (*Section) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{22}
}

func (x *Section) GetCharBegin() uint32 {
	if x != nil && x.CharBegin != nil {
		return *x.CharBegin
	}
	return 0
}

func (x *Section) GetCharEnd() uint32 {
	if x != nil && x.CharEnd != nil {
		return *x.CharEnd
	}
	return 0
}

func (x *Section) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *Section) GetSentenceIndexes() []uint32 {
	if x != nil {
		return x.SentenceIndexes
	}
	return nil
}

func (x *Section) GetDatetime() string {
	if x != nil && x.Datetime != nil {
		return *x.Datetime
	}
	return ""
}

func (x *Section) GetQuotes() []*Quote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

func (x *Section) GetAuthorCharBegin() uint32 {
	if x != nil && x.AuthorCharBegin != nil {
		return *x.AuthorCharBegin
	}
	return 0
}

func (x *Section) GetAuthorCharEnd() uint32 {
	if x != nil && x.AuthorCharEnd != nil {
		return *x.AuthorCharEnd
	}
	return 0
}

func (x *Section) GetXmlTag() *Token {
	if x != nil {
		return x.XmlTag
	}
	return nil
}

// A message for requesting a semgrex
// Each sentence stores information about the tokens making up the
// corresponding graph
// An alternative would have been to use the existing Document or
// Sentence classes, but the problem with that is it would be
// ambiguous which dependency object to use.
type SemgrexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Semgrex []string                       `protobuf:"bytes,1,rep,name=semgrex" json:"semgrex,omitempty"`
	Query   []*SemgrexRequest_Dependencies `protobuf:"bytes,2,rep,name=query" json:"query,omitempty"`
}

func (x *SemgrexRequest) Reset() {
	*x = SemgrexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemgrexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemgrexRequest) ProtoMessage() {}

func (x *SemgrexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemgrexRequest.ProtoReflect.Descriptor instead.
func (*SemgrexRequest) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{23}
}

func (x *SemgrexRequest) GetSemgrex() []string {
	if x != nil {
		return x.Semgrex
	}
	return nil
}

func (x *SemgrexRequest) GetQuery() []*SemgrexRequest_Dependencies {
	if x != nil {
		return x.Query
	}
	return nil
}

// The response from running a semgrex
// If you pass in M semgrex expressions and N dependency graphs,
// this returns MxN nested results.  Each SemgrexResult can match
// multiple times in one graph
type SemgrexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*SemgrexResponse_GraphResult `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (x *SemgrexResponse) Reset() {
	*x = SemgrexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemgrexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemgrexResponse) ProtoMessage() {}

func (x *SemgrexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemgrexResponse.ProtoReflect.Descriptor instead.
func (*SemgrexResponse) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{24}
}

func (x *SemgrexResponse) GetResult() []*SemgrexResponse_GraphResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// It's possible to send in a whole document, but we
// only care about the Sentences and Tokens
type TokensRegexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Doc     *Document `protobuf:"bytes,1,req,name=doc" json:"doc,omitempty"`
	Pattern []string  `protobuf:"bytes,2,rep,name=pattern" json:"pattern,omitempty"`
}

func (x *TokensRegexRequest) Reset() {
	*x = TokensRegexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokensRegexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensRegexRequest) ProtoMessage() {}

func (x *TokensRegexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensRegexRequest.ProtoReflect.Descriptor instead.
func (*TokensRegexRequest) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{25}
}

func (x *TokensRegexRequest) GetDoc() *Document {
	if x != nil {
		return x.Doc
	}
	return nil
}

func (x *TokensRegexRequest) GetPattern() []string {
	if x != nil {
		return x.Pattern
	}
	return nil
}

// The result will be a nested structure:
// repeated PatternMatch, one for each pattern
// each PatternMatch has a repeated Match,
//   which tells you which sentence matched and where
type TokensRegexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match []*TokensRegexResponse_PatternMatch `protobuf:"bytes,1,rep,name=match" json:"match,omitempty"`
}

func (x *TokensRegexResponse) Reset() {
	*x = TokensRegexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokensRegexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensRegexResponse) ProtoMessage() {}

func (x *TokensRegexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensRegexResponse.ProtoReflect.Descriptor instead.
func (*TokensRegexResponse) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{26}
}

func (x *TokensRegexResponse) GetMatch() []*TokensRegexResponse_PatternMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

type DependencyGraph_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SentenceIndex  *uint32 `protobuf:"varint,1,req,name=sentenceIndex" json:"sentenceIndex,omitempty"`
	Index          *uint32 `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
	CopyAnnotation *uint32 `protobuf:"varint,3,opt,name=copyAnnotation" json:"copyAnnotation,omitempty"`
}

func (x *DependencyGraph_Node) Reset() {
	*x = DependencyGraph_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyGraph_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyGraph_Node) ProtoMessage() {}

func (x *DependencyGraph_Node) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyGraph_Node.ProtoReflect.Descriptor instead.
func (*DependencyGraph_Node) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{5, 0}
}

func (x *DependencyGraph_Node) GetSentenceIndex() uint32 {
	if x != nil && x.SentenceIndex != nil {
		return *x.SentenceIndex
	}
	return 0
}

func (x *DependencyGraph_Node) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *DependencyGraph_Node) GetCopyAnnotation() uint32 {
	if x != nil && x.CopyAnnotation != nil {
		return *x.CopyAnnotation
	}
	return 0
}

type DependencyGraph_Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     *uint32   `protobuf:"varint,1,req,name=source" json:"source,omitempty"`
	Target     *uint32   `protobuf:"varint,2,req,name=target" json:"target,omitempty"`
	Dep        *string   `protobuf:"bytes,3,opt,name=dep" json:"dep,omitempty"`
	IsExtra    *bool     `protobuf:"varint,4,opt,name=isExtra" json:"isExtra,omitempty"`
	SourceCopy *uint32   `protobuf:"varint,5,opt,name=sourceCopy" json:"sourceCopy,omitempty"`
	TargetCopy *uint32   `protobuf:"varint,6,opt,name=targetCopy" json:"targetCopy,omitempty"`
	Language   *Language `protobuf:"varint,7,opt,name=language,enum=edu.stanford.nlp.pipeline.Language,def=0" json:"language,omitempty"`
}

// Default values for DependencyGraph_Edge fields.
const (
	Default_DependencyGraph_Edge_Language = Language_Unknown
)

func (x *DependencyGraph_Edge) Reset() {
	*x = DependencyGraph_Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyGraph_Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyGraph_Edge) ProtoMessage() {}

func (x *DependencyGraph_Edge) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyGraph_Edge.ProtoReflect.Descriptor instead.
func (*DependencyGraph_Edge) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{5, 1}
}

func (x *DependencyGraph_Edge) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *DependencyGraph_Edge) GetTarget() uint32 {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return 0
}

func (x *DependencyGraph_Edge) GetDep() string {
	if x != nil && x.Dep != nil {
		return *x.Dep
	}
	return ""
}

func (x *DependencyGraph_Edge) GetIsExtra() bool {
	if x != nil && x.IsExtra != nil {
		return *x.IsExtra
	}
	return false
}

func (x *DependencyGraph_Edge) GetSourceCopy() uint32 {
	if x != nil && x.SourceCopy != nil {
		return *x.SourceCopy
	}
	return 0
}

func (x *DependencyGraph_Edge) GetTargetCopy() uint32 {
	if x != nil && x.TargetCopy != nil {
		return *x.TargetCopy
	}
	return 0
}

func (x *DependencyGraph_Edge) GetLanguage() Language {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_DependencyGraph_Edge_Language
}

type CorefChain_CorefMention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MentionID     *int32  `protobuf:"varint,1,opt,name=mentionID" json:"mentionID,omitempty"`
	MentionType   *string `protobuf:"bytes,2,opt,name=mentionType" json:"mentionType,omitempty"`
	Number        *string `protobuf:"bytes,3,opt,name=number" json:"number,omitempty"`
	Gender        *string `protobuf:"bytes,4,opt,name=gender" json:"gender,omitempty"`
	Animacy       *string `protobuf:"bytes,5,opt,name=animacy" json:"animacy,omitempty"`
	BeginIndex    *uint32 `protobuf:"varint,6,opt,name=beginIndex" json:"beginIndex,omitempty"`
	EndIndex      *uint32 `protobuf:"varint,7,opt,name=endIndex" json:"endIndex,omitempty"`
	HeadIndex     *uint32 `protobuf:"varint,9,opt,name=headIndex" json:"headIndex,omitempty"`
	SentenceIndex *uint32 `protobuf:"varint,10,opt,name=sentenceIndex" json:"sentenceIndex,omitempty"`
	Position      *uint32 `protobuf:"varint,11,opt,name=position" json:"position,omitempty"` // the second element of position
}

func (x *CorefChain_CorefMention) Reset() {
	*x = CorefChain_CorefMention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorefChain_CorefMention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorefChain_CorefMention) ProtoMessage() {}

func (x *CorefChain_CorefMention) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorefChain_CorefMention.ProtoReflect.Descriptor instead.
func (*CorefChain_CorefMention) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CorefChain_CorefMention) GetMentionID() int32 {
	if x != nil && x.MentionID != nil {
		return *x.MentionID
	}
	return 0
}

func (x *CorefChain_CorefMention) GetMentionType() string {
	if x != nil && x.MentionType != nil {
		return *x.MentionType
	}
	return ""
}

func (x *CorefChain_CorefMention) GetNumber() string {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return ""
}

func (x *CorefChain_CorefMention) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *CorefChain_CorefMention) GetAnimacy() string {
	if x != nil && x.Animacy != nil {
		return *x.Animacy
	}
	return ""
}

func (x *CorefChain_CorefMention) GetBeginIndex() uint32 {
	if x != nil && x.BeginIndex != nil {
		return *x.BeginIndex
	}
	return 0
}

func (x *CorefChain_CorefMention) GetEndIndex() uint32 {
	if x != nil && x.EndIndex != nil {
		return *x.EndIndex
	}
	return 0
}

func (x *CorefChain_CorefMention) GetHeadIndex() uint32 {
	if x != nil && x.HeadIndex != nil {
		return *x.HeadIndex
	}
	return 0
}

func (x *CorefChain_CorefMention) GetSentenceIndex() uint32 {
	if x != nil && x.SentenceIndex != nil {
		return *x.SentenceIndex
	}
	return 0
}

func (x *CorefChain_CorefMention) GetPosition() uint32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

type SemgrexRequest_Dependencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token []*Token         `protobuf:"bytes,1,rep,name=token" json:"token,omitempty"`
	Graph *DependencyGraph `protobuf:"bytes,2,req,name=graph" json:"graph,omitempty"`
}

func (x *SemgrexRequest_Dependencies) Reset() {
	*x = SemgrexRequest_Dependencies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemgrexRequest_Dependencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemgrexRequest_Dependencies) ProtoMessage() {}

func (x *SemgrexRequest_Dependencies) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemgrexRequest_Dependencies.ProtoReflect.Descriptor instead.
func (*SemgrexRequest_Dependencies) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{23, 0}
}

func (x *SemgrexRequest_Dependencies) GetToken() []*Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SemgrexRequest_Dependencies) GetGraph() *DependencyGraph {
	if x != nil {
		return x.Graph
	}
	return nil
}

type SemgrexResponse_NamedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	MatchIndex *int32  `protobuf:"varint,2,req,name=matchIndex" json:"matchIndex,omitempty"`
}

func (x *SemgrexResponse_NamedNode) Reset() {
	*x = SemgrexResponse_NamedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemgrexResponse_NamedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemgrexResponse_NamedNode) ProtoMessage() {}

func (x *SemgrexResponse_NamedNode) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemgrexResponse_NamedNode.ProtoReflect.Descriptor instead.
func (*SemgrexResponse_NamedNode) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{24, 0}
}

func (x *SemgrexResponse_NamedNode) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SemgrexResponse_NamedNode) GetMatchIndex() int32 {
	if x != nil && x.MatchIndex != nil {
		return *x.MatchIndex
	}
	return 0
}

type SemgrexResponse_NamedRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Reln *string `protobuf:"bytes,2,req,name=reln" json:"reln,omitempty"`
}

func (x *SemgrexResponse_NamedRelation) Reset() {
	*x = SemgrexResponse_NamedRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemgrexResponse_NamedRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemgrexResponse_NamedRelation) ProtoMessage() {}

func (x *SemgrexResponse_NamedRelation) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemgrexResponse_NamedRelation.ProtoReflect.Descriptor instead.
func (*SemgrexResponse_NamedRelation) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{24, 1}
}

func (x *SemgrexResponse_NamedRelation) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SemgrexResponse_NamedRelation) GetReln() string {
	if x != nil && x.Reln != nil {
		return *x.Reln
	}
	return ""
}

type SemgrexResponse_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchIndex *int32                           `protobuf:"varint,1,req,name=matchIndex" json:"matchIndex,omitempty"`
	Node       []*SemgrexResponse_NamedNode     `protobuf:"bytes,2,rep,name=node" json:"node,omitempty"`
	Reln       []*SemgrexResponse_NamedRelation `protobuf:"bytes,3,rep,name=reln" json:"reln,omitempty"`
}

func (x *SemgrexResponse_Match) Reset() {
	*x = SemgrexResponse_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemgrexResponse_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemgrexResponse_Match) ProtoMessage() {}

func (x *SemgrexResponse_Match) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemgrexResponse_Match.ProtoReflect.Descriptor instead.
func (*SemgrexResponse_Match) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{24, 2}
}

func (x *SemgrexResponse_Match) GetMatchIndex() int32 {
	if x != nil && x.MatchIndex != nil {
		return *x.MatchIndex
	}
	return 0
}

func (x *SemgrexResponse_Match) GetNode() []*SemgrexResponse_NamedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *SemgrexResponse_Match) GetReln() []*SemgrexResponse_NamedRelation {
	if x != nil {
		return x.Reln
	}
	return nil
}

type SemgrexResponse_SemgrexResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match []*SemgrexResponse_Match `protobuf:"bytes,1,rep,name=match" json:"match,omitempty"`
}

func (x *SemgrexResponse_SemgrexResult) Reset() {
	*x = SemgrexResponse_SemgrexResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemgrexResponse_SemgrexResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemgrexResponse_SemgrexResult) ProtoMessage() {}

func (x *SemgrexResponse_SemgrexResult) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemgrexResponse_SemgrexResult.ProtoReflect.Descriptor instead.
func (*SemgrexResponse_SemgrexResult) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{24, 3}
}

func (x *SemgrexResponse_SemgrexResult) GetMatch() []*SemgrexResponse_Match {
	if x != nil {
		return x.Match
	}
	return nil
}

type SemgrexResponse_GraphResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*SemgrexResponse_SemgrexResult `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (x *SemgrexResponse_GraphResult) Reset() {
	*x = SemgrexResponse_GraphResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemgrexResponse_GraphResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemgrexResponse_GraphResult) ProtoMessage() {}

func (x *SemgrexResponse_GraphResult) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemgrexResponse_GraphResult.ProtoReflect.Descriptor instead.
func (*SemgrexResponse_GraphResult) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{24, 4}
}

func (x *SemgrexResponse_GraphResult) GetResult() []*SemgrexResponse_SemgrexResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type TokensRegexResponse_MatchLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Begin *int32  `protobuf:"varint,2,opt,name=begin" json:"begin,omitempty"`
	End   *int32  `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
}

func (x *TokensRegexResponse_MatchLocation) Reset() {
	*x = TokensRegexResponse_MatchLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokensRegexResponse_MatchLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensRegexResponse_MatchLocation) ProtoMessage() {}

func (x *TokensRegexResponse_MatchLocation) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensRegexResponse_MatchLocation.ProtoReflect.Descriptor instead.
func (*TokensRegexResponse_MatchLocation) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{26, 0}
}

func (x *TokensRegexResponse_MatchLocation) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *TokensRegexResponse_MatchLocation) GetBegin() int32 {
	if x != nil && x.Begin != nil {
		return *x.Begin
	}
	return 0
}

func (x *TokensRegexResponse_MatchLocation) GetEnd() int32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

type TokensRegexResponse_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sentence *int32                               `protobuf:"varint,1,req,name=sentence" json:"sentence,omitempty"`
	Match    *TokensRegexResponse_MatchLocation   `protobuf:"bytes,2,req,name=match" json:"match,omitempty"`
	Group    []*TokensRegexResponse_MatchLocation `protobuf:"bytes,3,rep,name=group" json:"group,omitempty"`
}

func (x *TokensRegexResponse_Match) Reset() {
	*x = TokensRegexResponse_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokensRegexResponse_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensRegexResponse_Match) ProtoMessage() {}

func (x *TokensRegexResponse_Match) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensRegexResponse_Match.ProtoReflect.Descriptor instead.
func (*TokensRegexResponse_Match) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{26, 1}
}

func (x *TokensRegexResponse_Match) GetSentence() int32 {
	if x != nil && x.Sentence != nil {
		return *x.Sentence
	}
	return 0
}

func (x *TokensRegexResponse_Match) GetMatch() *TokensRegexResponse_MatchLocation {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *TokensRegexResponse_Match) GetGroup() []*TokensRegexResponse_MatchLocation {
	if x != nil {
		return x.Group
	}
	return nil
}

type TokensRegexResponse_PatternMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match []*TokensRegexResponse_Match `protobuf:"bytes,1,rep,name=match" json:"match,omitempty"`
}

func (x *TokensRegexResponse_PatternMatch) Reset() {
	*x = TokensRegexResponse_PatternMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokensRegexResponse_PatternMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensRegexResponse_PatternMatch) ProtoMessage() {}

func (x *TokensRegexResponse_PatternMatch) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensRegexResponse_PatternMatch.ProtoReflect.Descriptor instead.
func (*TokensRegexResponse_PatternMatch) Descriptor() ([]byte, []int) {
	return file_corenlp_proto_rawDescGZIP(), []int{26, 2}
}

func (x *TokensRegexResponse_PatternMatch) GetMatch() []*TokensRegexResponse_Match {
	if x != nil {
		return x.Match
	}
	return nil
}

var File_corenlp_proto protoreflect.FileDescriptor

var file_corenlp_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x19, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x80, 0x08, 0x0a, 0x08, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0a,
	0x63, 0x6f, 0x72, 0x65, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12,
	0x4e, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x64, 0x75,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x11, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x3e, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72,
	0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x64, 0x75, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x45, 0x52, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x68, 0x61,
	0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x68, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x78, 0x6d, 0x6c, 0x44, 0x6f, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x78, 0x6d,
	0x6c, 0x44, 0x6f, 0x63, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x72, 0x65, 0x66, 0x12, 0x3c, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x66,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x72, 0x65,
	0x66, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x68, 0x61, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x23, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x23, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x23, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x23, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x80, 0x02, 0x22, 0x91, 0x16,
	0x0a, 0x08, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x14,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x64,
	0x12, 0x42, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f,
	0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x12, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x12, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x0f, 0x6b, 0x42, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x0f, 0x6b,
	0x42, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x73, 0x12, 0x58,
	0x0a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x64, 0x75, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x20, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x43, 0x43, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66,
	0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x52, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x43, 0x43, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x64, 0x0a, 0x17, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f,
	0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x17, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x65, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x65, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x6b, 0x62, 0x70, 0x54, 0x72,
	0x69, 0x70, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x64, 0x75,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x09, 0x6b, 0x62, 0x70, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65,
	0x12, 0x57, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x64, 0x75,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x65, 0x6e, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x23, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e,
	0x65, 0x6e, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x14, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65,
	0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x14, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x6e,
	0x0a, 0x1c, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x6c,
	0x75, 0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66,
	0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x52, 0x1c, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x6c,
	0x75, 0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x68, 0x61, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x68, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x68, 0x61, 0x73, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x64, 0x75,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x45, 0x52, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x18,
	0x38, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x12, 0x3e, 0x0a, 0x1a, 0x68,
	0x61, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63,
	0x49, 0x44, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x68, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x68, 0x61, 0x73, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x4b, 0x42,
	0x50, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68, 0x61, 0x73, 0x4b, 0x42, 0x50,
	0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x61, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x65, 0x54, 0x72,
	0x69, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x68, 0x61, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x65,
	0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4f, 0x0a,
	0x10, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74,
	0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x65, 0x6e,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x80,
	0x02, 0x22, 0xef, 0x12, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x72, 0x73,
	0x65, 0x4e, 0x45, 0x52, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x72,
	0x73, 0x65, 0x4e, 0x45, 0x52, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x4e, 0x45, 0x52, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x45, 0x52, 0x12, 0x24, 0x0a,
	0x0d, 0x6e, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x42,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x72,
	0x6f, 0x62, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x4e, 0x45, 0x52, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x45, 0x52, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x6d,
	0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x6d, 0x6d, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x74, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x74, 0x74, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x40, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x78, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x58, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x58, 0x6d, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x78, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x78, 0x6d, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63,
	0x6f, 0x72, 0x65, 0x66, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65,
	0x61, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x08,
	0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69, 0x72,
	0x12, 0x33, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52,
	0x04, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x52, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x6c, 0x6c, 0x55, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f,
	0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x6c, 0x6c, 0x55, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x54, 0x61, 0x67, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x54, 0x61, 0x67, 0x12, 0x49, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x6c, 0x6c, 0x55, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x70, 0x61, 0x6e,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6c, 0x6c, 0x55, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6c,
	0x6c, 0x55, 0x4d, 0x69, 0x73, 0x63, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x6c, 0x6c, 0x55, 0x4d, 0x69, 0x73, 0x63, 0x12, 0x5c, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6c,
	0x6c, 0x55, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70, 0x73, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x6c, 0x6c, 0x55, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x44, 0x65, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65,
	0x64, 0x69, 0x61, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x65, 0x43, 0x61,
	0x73, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x75, 0x65, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x65, 0x43, 0x61, 0x73, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x65, 0x43, 0x61,
	0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x65, 0x43, 0x68, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x65, 0x53, 0x65, 0x67, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x65, 0x53, 0x65, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x65, 0x58, 0x4d, 0x4c, 0x43, 0x68, 0x61, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x58, 0x4d, 0x4c, 0x43, 0x68, 0x61, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x61, 0x62, 0x69, 0x63, 0x53, 0x65, 0x67, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x61, 0x62, 0x69, 0x63, 0x53, 0x65, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f,
	0x72, 0x65, 0x66, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x40, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4d, 0x57,
	0x54, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4d, 0x57, 0x54, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x57, 0x54, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x57, 0x54, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x77, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x77, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45,
	0x6e, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x2a, 0x05, 0x08, 0x64,
	0x10, 0x80, 0x02, 0x22, 0xed, 0x05, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f,
	0x63, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x65, 0x76,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x65, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x69, 0x65, 0x76, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x69,
	0x65, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x15, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x6a, 0x0a, 0x1a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x64,
	0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x1a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x22, 0x87, 0x02, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x79, 0x69,
	0x65, 0x6c, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a,
	0x0d, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65,
	0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x04,
	0x0a, 0x0f, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e,
	0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66,
	0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x1a, 0x6a, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x63, 0x6f, 0x70, 0x79, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xec, 0x01, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x70, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x70, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x70, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x70, 0x79, 0x12, 0x48, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xd3,
	0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xb4, 0x02,
	0x0a, 0x0c, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x0d, 0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a,
	0x68, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x12,
	0x67, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x6f, 0x6c, 0x64, 0x43, 0x6f,
	0x72, 0x65, 0x66, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x72, 0x65, 0x66, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x74, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x75,
	0x74, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x49, 0x6e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x54, 0x77, 0x69,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x54, 0x77, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x68, 0x61, 0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x15,
	0x68, 0x61, 0x73, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x65, 0x64, 0x6e, 0x63, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68, 0x61, 0x73,
	0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x6e,
	0x63, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x62, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x56, 0x65, 0x72, 0x62, 0x12, 0x42, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x08,
	0x68, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x64, 0x75, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x57, 0x6f, 0x72,
	0x64, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x4a, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x6e,
	0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x0c,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x18, 0x37, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6e,
	0x6f, 0x75, 0x6e, 0x73, 0x18, 0x38, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x39, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x3a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x57, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x0b, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2e, 0x0a, 0x04, 0x53, 0x70, 0x61, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xd6, 0x02, 0x0a, 0x06, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x68, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x61, 0x72, 0x67,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x13, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x53, 0x70, 0x61, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70,
	0x61, 0x6e, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x61, 0x6e,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x22, 0xb9, 0x05, 0x0a, 0x08,
	0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66,
	0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x61, 0x69,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x64,
	0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x61,
	0x69, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x61, 0x69, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x61, 0x69, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65,
	0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x64, 0x75,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xac, 0x04, 0x0a, 0x0a, 0x4e, 0x45, 0x52, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x44, 0x0a, 0x1d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x1d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x49, 0x6e,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e,
	0x64, 0x49, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x03, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4e, 0x45, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x45, 0x52, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x05,
	0x74, 0x69, 0x6d, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x64,
	0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x78, 0x52, 0x05, 0x74,
	0x69, 0x6d, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69,
	0x61, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77,
	0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x75, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x54, 0x72,
	0x75, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x55, 0x0a, 0x0d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x9a, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69,
	0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73,
	0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x50, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x64, 0x75, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x64, 0x75, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e,
	0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x04, 0x74, 0x72, 0x65,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x42, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x42, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x42,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x42,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x4f, 0x66, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x4f, 0x66, 0x22, 0x39, 0x0a,
	0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe3, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x72, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x72, 0x45, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72,
	0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x06,
	0x78, 0x6d, 0x6c, 0x54, 0x61, 0x67, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06,
	0x78, 0x6d, 0x6c, 0x54, 0x61, 0x67, 0x22, 0x83, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x6d, 0x67,
	0x72, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72,
	0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x88, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x05, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x64, 0x75, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x22, 0xd7, 0x04, 0x0a,
	0x0f, 0x53, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x1a, 0x3f, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x1a, 0x37, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x6c, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x6c, 0x6e, 0x1a, 0xbf, 0x01, 0x0a, 0x05, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72,
	0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x4c,
	0x0a, 0x04, 0x72, 0x65, 0x6c, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65,
	0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x72, 0x65, 0x6c, 0x6e, 0x1a, 0x57, 0x0a, 0x0d,
	0x53, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65,
	0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x5f, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66,
	0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x53, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x65, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03,
	0x64, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x64, 0x75, 0x2e,
	0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03,
	0x64, 0x6f, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0xdf, 0x03,
	0x0a, 0x13, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66,
	0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x4b, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x1a, 0xcb, 0x01, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x64, 0x75,
	0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x52, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x1a, 0x5a, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x72,
	0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2a,
	0xa3, 0x01, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x79,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x72, 0x61, 0x62, 0x69, 0x63, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x48, 0x65, 0x62, 0x72, 0x65, 0x77, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x10, 0x09, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x65, 0x10, 0x0a, 0x2a, 0x68, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x4e, 0x45, 0x47,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x45, 0x41, 0x4b, 0x5f,
	0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45,
	0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x45, 0x41, 0x4b, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54,
	0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x2a,
	0x93, 0x01, 0x0a, 0x14, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x51, 0x55, 0x49,
	0x56, 0x41, 0x4c, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x41, 0x49, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x4e, 0x54,
	0x41, 0x49, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x45, 0x47,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x4e, 0x43, 0x45, 0x10, 0x06, 0x42, 0x2a, 0x0a, 0x19, 0x65, 0x64, 0x75, 0x2e, 0x73, 0x74, 0x61,
	0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x42, 0x0d, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x4c, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x73,
}

var (
	file_corenlp_proto_rawDescOnce sync.Once
	file_corenlp_proto_rawDescData = file_corenlp_proto_rawDesc
)

func file_corenlp_proto_rawDescGZIP() []byte {
	file_corenlp_proto_rawDescOnce.Do(func() {
		file_corenlp_proto_rawDescData = protoimpl.X.CompressGZIP(file_corenlp_proto_rawDescData)
	})
	return file_corenlp_proto_rawDescData
}

var file_corenlp_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_corenlp_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_corenlp_proto_goTypes = []interface{}{
	(Language)(0),                             // 0: edu.stanford.nlp.pipeline.Language
	(Sentiment)(0),                            // 1: edu.stanford.nlp.pipeline.Sentiment
	(NaturalLogicRelation)(0),                 // 2: edu.stanford.nlp.pipeline.NaturalLogicRelation
	(*Document)(nil),                          // 3: edu.stanford.nlp.pipeline.Document
	(*Sentence)(nil),                          // 4: edu.stanford.nlp.pipeline.Sentence
	(*Token)(nil),                             // 5: edu.stanford.nlp.pipeline.Token
	(*Quote)(nil),                             // 6: edu.stanford.nlp.pipeline.Quote
	(*ParseTree)(nil),                         // 7: edu.stanford.nlp.pipeline.ParseTree
	(*DependencyGraph)(nil),                   // 8: edu.stanford.nlp.pipeline.DependencyGraph
	(*CorefChain)(nil),                        // 9: edu.stanford.nlp.pipeline.CorefChain
	(*Mention)(nil),                           // 10: edu.stanford.nlp.pipeline.Mention
	(*IndexedWord)(nil),                       // 11: edu.stanford.nlp.pipeline.IndexedWord
	(*SpeakerInfo)(nil),                       // 12: edu.stanford.nlp.pipeline.SpeakerInfo
	(*Span)(nil),                              // 13: edu.stanford.nlp.pipeline.Span
	(*Timex)(nil),                             // 14: edu.stanford.nlp.pipeline.Timex
	(*Entity)(nil),                            // 15: edu.stanford.nlp.pipeline.Entity
	(*Relation)(nil),                          // 16: edu.stanford.nlp.pipeline.Relation
	(*Operator)(nil),                          // 17: edu.stanford.nlp.pipeline.Operator
	(*Polarity)(nil),                          // 18: edu.stanford.nlp.pipeline.Polarity
	(*NERMention)(nil),                        // 19: edu.stanford.nlp.pipeline.NERMention
	(*SentenceFragment)(nil),                  // 20: edu.stanford.nlp.pipeline.SentenceFragment
	(*TokenLocation)(nil),                     // 21: edu.stanford.nlp.pipeline.TokenLocation
	(*RelationTriple)(nil),                    // 22: edu.stanford.nlp.pipeline.RelationTriple
	(*MapStringString)(nil),                   // 23: edu.stanford.nlp.pipeline.MapStringString
	(*MapIntString)(nil),                      // 24: edu.stanford.nlp.pipeline.MapIntString
	(*Section)(nil),                           // 25: edu.stanford.nlp.pipeline.Section
	(*SemgrexRequest)(nil),                    // 26: edu.stanford.nlp.pipeline.SemgrexRequest
	(*SemgrexResponse)(nil),                   // 27: edu.stanford.nlp.pipeline.SemgrexResponse
	(*TokensRegexRequest)(nil),                // 28: edu.stanford.nlp.pipeline.TokensRegexRequest
	(*TokensRegexResponse)(nil),               // 29: edu.stanford.nlp.pipeline.TokensRegexResponse
	(*DependencyGraph_Node)(nil),              // 30: edu.stanford.nlp.pipeline.DependencyGraph.Node
	(*DependencyGraph_Edge)(nil),              // 31: edu.stanford.nlp.pipeline.DependencyGraph.Edge
	(*CorefChain_CorefMention)(nil),           // 32: edu.stanford.nlp.pipeline.CorefChain.CorefMention
	(*SemgrexRequest_Dependencies)(nil),       // 33: edu.stanford.nlp.pipeline.SemgrexRequest.Dependencies
	(*SemgrexResponse_NamedNode)(nil),         // 34: edu.stanford.nlp.pipeline.SemgrexResponse.NamedNode
	(*SemgrexResponse_NamedRelation)(nil),     // 35: edu.stanford.nlp.pipeline.SemgrexResponse.NamedRelation
	(*SemgrexResponse_Match)(nil),             // 36: edu.stanford.nlp.pipeline.SemgrexResponse.Match
	(*SemgrexResponse_SemgrexResult)(nil),     // 37: edu.stanford.nlp.pipeline.SemgrexResponse.SemgrexResult
	(*SemgrexResponse_GraphResult)(nil),       // 38: edu.stanford.nlp.pipeline.SemgrexResponse.GraphResult
	(*TokensRegexResponse_MatchLocation)(nil), // 39: edu.stanford.nlp.pipeline.TokensRegexResponse.MatchLocation
	(*TokensRegexResponse_Match)(nil),         // 40: edu.stanford.nlp.pipeline.TokensRegexResponse.Match
	(*TokensRegexResponse_PatternMatch)(nil),  // 41: edu.stanford.nlp.pipeline.TokensRegexResponse.PatternMatch
}
var file_corenlp_proto_depIdxs = []int32{
	4,  // 0: edu.stanford.nlp.pipeline.Document.sentence:type_name -> edu.stanford.nlp.pipeline.Sentence
	9,  // 1: edu.stanford.nlp.pipeline.Document.corefChain:type_name -> edu.stanford.nlp.pipeline.CorefChain
	5,  // 2: edu.stanford.nlp.pipeline.Document.sentencelessToken:type_name -> edu.stanford.nlp.pipeline.Token
	5,  // 3: edu.stanford.nlp.pipeline.Document.character:type_name -> edu.stanford.nlp.pipeline.Token
	6,  // 4: edu.stanford.nlp.pipeline.Document.quote:type_name -> edu.stanford.nlp.pipeline.Quote
	19, // 5: edu.stanford.nlp.pipeline.Document.mentions:type_name -> edu.stanford.nlp.pipeline.NERMention
	25, // 6: edu.stanford.nlp.pipeline.Document.sections:type_name -> edu.stanford.nlp.pipeline.Section
	10, // 7: edu.stanford.nlp.pipeline.Document.mentionsForCoref:type_name -> edu.stanford.nlp.pipeline.Mention
	5,  // 8: edu.stanford.nlp.pipeline.Sentence.token:type_name -> edu.stanford.nlp.pipeline.Token
	7,  // 9: edu.stanford.nlp.pipeline.Sentence.parseTree:type_name -> edu.stanford.nlp.pipeline.ParseTree
	7,  // 10: edu.stanford.nlp.pipeline.Sentence.binarizedParseTree:type_name -> edu.stanford.nlp.pipeline.ParseTree
	7,  // 11: edu.stanford.nlp.pipeline.Sentence.annotatedParseTree:type_name -> edu.stanford.nlp.pipeline.ParseTree
	7,  // 12: edu.stanford.nlp.pipeline.Sentence.kBestParseTrees:type_name -> edu.stanford.nlp.pipeline.ParseTree
	8,  // 13: edu.stanford.nlp.pipeline.Sentence.basicDependencies:type_name -> edu.stanford.nlp.pipeline.DependencyGraph
	8,  // 14: edu.stanford.nlp.pipeline.Sentence.collapsedDependencies:type_name -> edu.stanford.nlp.pipeline.DependencyGraph
	8,  // 15: edu.stanford.nlp.pipeline.Sentence.collapsedCCProcessedDependencies:type_name -> edu.stanford.nlp.pipeline.DependencyGraph
	8,  // 16: edu.stanford.nlp.pipeline.Sentence.alternativeDependencies:type_name -> edu.stanford.nlp.pipeline.DependencyGraph
	22, // 17: edu.stanford.nlp.pipeline.Sentence.openieTriple:type_name -> edu.stanford.nlp.pipeline.RelationTriple
	22, // 18: edu.stanford.nlp.pipeline.Sentence.kbpTriple:type_name -> edu.stanford.nlp.pipeline.RelationTriple
	20, // 19: edu.stanford.nlp.pipeline.Sentence.entailedSentence:type_name -> edu.stanford.nlp.pipeline.SentenceFragment
	20, // 20: edu.stanford.nlp.pipeline.Sentence.entailedClause:type_name -> edu.stanford.nlp.pipeline.SentenceFragment
	8,  // 21: edu.stanford.nlp.pipeline.Sentence.enhancedDependencies:type_name -> edu.stanford.nlp.pipeline.DependencyGraph
	8,  // 22: edu.stanford.nlp.pipeline.Sentence.enhancedPlusPlusDependencies:type_name -> edu.stanford.nlp.pipeline.DependencyGraph
	5,  // 23: edu.stanford.nlp.pipeline.Sentence.character:type_name -> edu.stanford.nlp.pipeline.Token
	15, // 24: edu.stanford.nlp.pipeline.Sentence.entity:type_name -> edu.stanford.nlp.pipeline.Entity
	16, // 25: edu.stanford.nlp.pipeline.Sentence.relation:type_name -> edu.stanford.nlp.pipeline.Relation
	19, // 26: edu.stanford.nlp.pipeline.Sentence.mentions:type_name -> edu.stanford.nlp.pipeline.NERMention
	10, // 27: edu.stanford.nlp.pipeline.Sentence.mentionsForCoref:type_name -> edu.stanford.nlp.pipeline.Mention
	4,  // 28: edu.stanford.nlp.pipeline.Sentence.enhancedSentence:type_name -> edu.stanford.nlp.pipeline.Sentence
	14, // 29: edu.stanford.nlp.pipeline.Token.timexValue:type_name -> edu.stanford.nlp.pipeline.Timex
	17, // 30: edu.stanford.nlp.pipeline.Token.operator:type_name -> edu.stanford.nlp.pipeline.Operator
	18, // 31: edu.stanford.nlp.pipeline.Token.polarity:type_name -> edu.stanford.nlp.pipeline.Polarity
	13, // 32: edu.stanford.nlp.pipeline.Token.span:type_name -> edu.stanford.nlp.pipeline.Span
	23, // 33: edu.stanford.nlp.pipeline.Token.conllUFeatures:type_name -> edu.stanford.nlp.pipeline.MapStringString
	13, // 34: edu.stanford.nlp.pipeline.Token.conllUTokenSpan:type_name -> edu.stanford.nlp.pipeline.Span
	23, // 35: edu.stanford.nlp.pipeline.Token.conllUSecondaryDeps:type_name -> edu.stanford.nlp.pipeline.MapStringString
	8,  // 36: edu.stanford.nlp.pipeline.Quote.attributionDependencyGraph:type_name -> edu.stanford.nlp.pipeline.DependencyGraph
	7,  // 37: edu.stanford.nlp.pipeline.ParseTree.child:type_name -> edu.stanford.nlp.pipeline.ParseTree
	1,  // 38: edu.stanford.nlp.pipeline.ParseTree.sentiment:type_name -> edu.stanford.nlp.pipeline.Sentiment
	30, // 39: edu.stanford.nlp.pipeline.DependencyGraph.node:type_name -> edu.stanford.nlp.pipeline.DependencyGraph.Node
	31, // 40: edu.stanford.nlp.pipeline.DependencyGraph.edge:type_name -> edu.stanford.nlp.pipeline.DependencyGraph.Edge
	32, // 41: edu.stanford.nlp.pipeline.CorefChain.mention:type_name -> edu.stanford.nlp.pipeline.CorefChain.CorefMention
	11, // 42: edu.stanford.nlp.pipeline.Mention.headIndexedWord:type_name -> edu.stanford.nlp.pipeline.IndexedWord
	11, // 43: edu.stanford.nlp.pipeline.Mention.dependingVerb:type_name -> edu.stanford.nlp.pipeline.IndexedWord
	11, // 44: edu.stanford.nlp.pipeline.Mention.headWord:type_name -> edu.stanford.nlp.pipeline.IndexedWord
	12, // 45: edu.stanford.nlp.pipeline.Mention.speakerInfo:type_name -> edu.stanford.nlp.pipeline.SpeakerInfo
	11, // 46: edu.stanford.nlp.pipeline.Mention.sentenceWords:type_name -> edu.stanford.nlp.pipeline.IndexedWord
	11, // 47: edu.stanford.nlp.pipeline.Mention.originalSpan:type_name -> edu.stanford.nlp.pipeline.IndexedWord
	15, // 48: edu.stanford.nlp.pipeline.Relation.arg:type_name -> edu.stanford.nlp.pipeline.Entity
	2,  // 49: edu.stanford.nlp.pipeline.Polarity.projectEquivalence:type_name -> edu.stanford.nlp.pipeline.NaturalLogicRelation
	2,  // 50: edu.stanford.nlp.pipeline.Polarity.projectForwardEntailment:type_name -> edu.stanford.nlp.pipeline.NaturalLogicRelation
	2,  // 51: edu.stanford.nlp.pipeline.Polarity.projectReverseEntailment:type_name -> edu.stanford.nlp.pipeline.NaturalLogicRelation
	2,  // 52: edu.stanford.nlp.pipeline.Polarity.projectNegation:type_name -> edu.stanford.nlp.pipeline.NaturalLogicRelation
	2,  // 53: edu.stanford.nlp.pipeline.Polarity.projectAlternation:type_name -> edu.stanford.nlp.pipeline.NaturalLogicRelation
	2,  // 54: edu.stanford.nlp.pipeline.Polarity.projectCover:type_name -> edu.stanford.nlp.pipeline.NaturalLogicRelation
	2,  // 55: edu.stanford.nlp.pipeline.Polarity.projectIndependence:type_name -> edu.stanford.nlp.pipeline.NaturalLogicRelation
	14, // 56: edu.stanford.nlp.pipeline.NERMention.timex:type_name -> edu.stanford.nlp.pipeline.Timex
	21, // 57: edu.stanford.nlp.pipeline.RelationTriple.subjectTokens:type_name -> edu.stanford.nlp.pipeline.TokenLocation
	21, // 58: edu.stanford.nlp.pipeline.RelationTriple.relationTokens:type_name -> edu.stanford.nlp.pipeline.TokenLocation
	21, // 59: edu.stanford.nlp.pipeline.RelationTriple.objectTokens:type_name -> edu.stanford.nlp.pipeline.TokenLocation
	8,  // 60: edu.stanford.nlp.pipeline.RelationTriple.tree:type_name -> edu.stanford.nlp.pipeline.DependencyGraph
	6,  // 61: edu.stanford.nlp.pipeline.Section.quotes:type_name -> edu.stanford.nlp.pipeline.Quote
	5,  // 62: edu.stanford.nlp.pipeline.Section.xmlTag:type_name -> edu.stanford.nlp.pipeline.Token
	33, // 63: edu.stanford.nlp.pipeline.SemgrexRequest.query:type_name -> edu.stanford.nlp.pipeline.SemgrexRequest.Dependencies
	38, // 64: edu.stanford.nlp.pipeline.SemgrexResponse.result:type_name -> edu.stanford.nlp.pipeline.SemgrexResponse.GraphResult
	3,  // 65: edu.stanford.nlp.pipeline.TokensRegexRequest.doc:type_name -> edu.stanford.nlp.pipeline.Document
	41, // 66: edu.stanford.nlp.pipeline.TokensRegexResponse.match:type_name -> edu.stanford.nlp.pipeline.TokensRegexResponse.PatternMatch
	0,  // 67: edu.stanford.nlp.pipeline.DependencyGraph.Edge.language:type_name -> edu.stanford.nlp.pipeline.Language
	5,  // 68: edu.stanford.nlp.pipeline.SemgrexRequest.Dependencies.token:type_name -> edu.stanford.nlp.pipeline.Token
	8,  // 69: edu.stanford.nlp.pipeline.SemgrexRequest.Dependencies.graph:type_name -> edu.stanford.nlp.pipeline.DependencyGraph
	34, // 70: edu.stanford.nlp.pipeline.SemgrexResponse.Match.node:type_name -> edu.stanford.nlp.pipeline.SemgrexResponse.NamedNode
	35, // 71: edu.stanford.nlp.pipeline.SemgrexResponse.Match.reln:type_name -> edu.stanford.nlp.pipeline.SemgrexResponse.NamedRelation
	36, // 72: edu.stanford.nlp.pipeline.SemgrexResponse.SemgrexResult.match:type_name -> edu.stanford.nlp.pipeline.SemgrexResponse.Match
	37, // 73: edu.stanford.nlp.pipeline.SemgrexResponse.GraphResult.result:type_name -> edu.stanford.nlp.pipeline.SemgrexResponse.SemgrexResult
	39, // 74: edu.stanford.nlp.pipeline.TokensRegexResponse.Match.match:type_name -> edu.stanford.nlp.pipeline.TokensRegexResponse.MatchLocation
	39, // 75: edu.stanford.nlp.pipeline.TokensRegexResponse.Match.group:type_name -> edu.stanford.nlp.pipeline.TokensRegexResponse.MatchLocation
	40, // 76: edu.stanford.nlp.pipeline.TokensRegexResponse.PatternMatch.match:type_name -> edu.stanford.nlp.pipeline.TokensRegexResponse.Match
	77, // [77:77] is the sub-list for method output_type
	77, // [77:77] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_corenlp_proto_init() }
func file_corenlp_proto_init() {
	if File_corenlp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_corenlp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sentence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorefChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexedWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Polarity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NERMention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentenceFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationTriple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapIntString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemgrexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemgrexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokensRegexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokensRegexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyGraph_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyGraph_Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorefChain_CorefMention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemgrexRequest_Dependencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemgrexResponse_NamedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemgrexResponse_NamedRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemgrexResponse_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemgrexResponse_SemgrexResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemgrexResponse_GraphResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokensRegexResponse_MatchLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokensRegexResponse_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokensRegexResponse_PatternMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_corenlp_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_corenlp_proto_goTypes,
		DependencyIndexes: file_corenlp_proto_depIdxs,
		EnumInfos:         file_corenlp_proto_enumTypes,
		MessageInfos:      file_corenlp_proto_msgTypes,
	}.Build()
	File_corenlp_proto = out.File
	file_corenlp_proto_rawDesc = nil
	file_corenlp_proto_goTypes = nil
	file_corenlp_proto_depIdxs = nil
}
